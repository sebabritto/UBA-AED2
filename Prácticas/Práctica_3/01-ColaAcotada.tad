TAD ColaAcotada
	Observadores Básicos:
		verCola:		cacotada -> cola(nat)
		capacidad:	cacotada -> nat
	Generadores:
		vacia:			nat 							-> cacotada
		encolar:		nat × cacotada c	-> cacotada	{(tamaño(verCola(c)) < capacidad(c))}
		//Tengo que agregar desencolar, no tendria sentido que no este incluido.
		desencolar: cacotada c 				-> cacotada {¬vacía?(verCola(cacotada))}
	Axiomas:
		verCola(vacia(c))					≡	vacia
		verCola(encolar(a, c))		≡	encolar(a, verCola(c))
		verCola(desencolar(c))    ≡ desencolar(verCola(c))
		capacidad(vacia(n))				≡	n
		capacidad(encolar(a, c))	≡	capacidad(c)
		capacidad(desencolar(c))	≡ capacidad(c) 
	Fin TAD
//a)
Representación:
	cacotada se representa con estr donde
		estr es tupla ⟨inicio: nat, fin: nat, elem: array[0...n] de nat⟩
---
Solución Informal:
	- e.inicio y e.fin tienen que estar dentro del rango de e.elem
	- Entre e.inicio y e.fin no puede haber 0s, y fuera del rango de estos todos deben ser 0.
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde:
		(1)	≡	0 ≤ e.inicio < tam(e.elem) ∧ 0 ≤ e.fin < tam(e.elem)
		(2)	≡	(∀ i: nat)((e.inicio ≤ i ≤ e.fin ⇒L e.elem[i] ≠ 0) ∧L (0 ≤ i < e.inicio ∨ e.fin < i < tam(e.elem) ⇒L e.elem[i] = 0)) ∨L
					(∀ i: nat)((0 ≤ i < e.fin ∨ e.inicio  < i < tam(e.elem) ⇒L e.elem[i] ≠ 0) ∧ (e.fin < i < e.inc ⇒L e.elem[i] = 0))
---
Función de abstracción:
	Abs:	estr	->	cacotada	{Rep(e)}
	(∀e: estr) Abs(e) =obs ca: cacotada | (1)∧(2)
		donde:
		(1)	≡	capacidad(ca) = tam(e.elem)
		(2)	≡	verCola(ca) = arregloACola(e.elem, e.inicio, e.fin)
		
		arregloACola: nat × nat × array[0...n] -> cola(nat)
		arregloACola(inicio, fin, arreglo) ≡	if inicio = fin then
																						encolar(arreglo[inicio], vacia)
																					else
																						if fin = 0 then
																							encolar(arreglo[fin], arregloACola(inicio, tam(arreglo) - 1, arreglo))
																						else
																							encolar(arreglo[fin], arregloACola(inicio, fin - 1, arreglo))
																						fi
																					fi
---
//b)
Interfaz:
	Parámetros formales:
		Géneros:	α
	Se explica con:	ColaAcotada
	Géneros:		cacotada
	
	Operaciones básicas:
		Vacia(in n: nat)	-> res: cacotada 
		Pre ≡ {true}
		Post ≡ {res =obs vacia(n)}
		Complejidad: Θ(1)
		Descripción: Genera una cola acotada con capacidad n.
		Aliasing: No presenta aspectos de aliasing.
		---
		Encolar(in n: nat, in/out ca: cacotada)
		Pre ≡ {ca = ca₀ ∧ tamaño(verCola(ca)) < capacidad(ca)}
		Post ≡ {ca =obs encolar(n, ca₀)}
		Complejidad: Θ(1)
		Descripción: Agrega el elemento n como ultimo elemento de la cola acotada.
		Aliasing: El elemento n se agrega por copia.
		---
		Desencolar(in/out ca: cacotada)
		Pre ≡	{ca = ca₀ ∧ ¬vacía?(verCola(ca))}
		Post ≡ {ca = desencolar(ca₀)}
		Complejidad:
		Descripción: desencola el proximo de ca.
		Aliasing:
		---
		VerCola(in ca: cacotada)	-> res: cola(nat)
		Pre ≡ {true}
		Post ≡ {res =obs verCola(ca)}
		Complejidad: Θ(1)
		Descripción: Genera una cola a partir de cacotada
		Aliasing: res es modificable si y solo si ca es modificable.
		---
		Capacidad(in ca: cacotada)	-> res: nat
		Pre ≡ {true}
		Post ≡ {res =obs capacidad(ca)}
		Complejidad: Θ(1)
		Descripción: Devuelve la capacidad de cacotada.
		Aliasing: No presenta aspectos de aliasing.
		---
		ArregloACola(in inicio: nat, in fin: nat, in arreglo: ad(nat)) -> res: cola(nat)
		Pre ≡ {0 ≤ inicio < tam(arreglo) ∧ 0 ≤ fin < tam(arreglo)}
		Post ≡ {res = arregloACola(inicio, fin, arreglo)}
		Complejidad: O(tam(arreglo))
		Descripción: Genera una cola a partir de un arreglo.
		Aliasing: No presenta aspectos de aliasing.
		---
	Algoritmos del módulo:
		//res.inicio y res.fin apuntan al primer elemento de la lista, a medida que
		//se desencola o encola la cacotada estos indices se van moviendo.
		//Es importante acordarse que res.fin apunta al ultimo elemento encolado.
		iVacia(in n: nat) -> res: estr
			res.inicio <- 0
			res.fin  <- 0
			res.elem <- CrearArreglo(n)
		---
		iEncolar(in n: nat, in/out ca: estr)
			if ca.inicio = ca.fin then //Esto solo pasa si solo hay un valor encolado 1 valor o ninguno.
				if ca.elem[ca.fin ] != 0 then
				 	ca.fin <- ca.fin + 1
				end if
			else
				if ca.fin = Tamaño(ca.elem) - 1
					ca.fin <- 0
				else
					ca.fin <- ca.fin + 1
				end if
			end if
			ca.elem[ca.fin ] <- n
		---
		iDesencolar(in/out ca: estr)
			ca.elem[ca.inicio ] <- 0
			if ca.inicio = ca.fin then //No puede estar vacia cacotada, asi que esto solo pasa si hay solo un elemento encolado.
				if tam(ca.elem) != 1 then
					if ca.fin = Tamaño(ca.elem) - 1 then
						ca.inicio <- 0
						ca.fin <- 0
					else
						ca.inicio <- ca.inicio + 1
						ca.fin <- ca.fin + 1
					end if
				end if
			else
				if ca.inicio = Tamaño(ca.elem) - 1  then
					ca.inicio <- 0
				else
					ca.inicio <- ca.inicio + 1
				end if
			end if
		---
		iVerCola(in ca: estr) -> res: cola(nat)
			res <- ArregloACola(ca.inicio, ca.fin, ca.elem)
		---
		iCapacidad(in ca: estr) -> res: nat
			res <- Tamaño(ca.elem)
		---
		iArregloACola(in inicio: nat, in fin: nat, in arr: ad(α)) -> res: cola(nat)
			res <- Vacia()
			while inicio ≤ fin do
				if inicio = Tamaño(arr) - 1 then
					Encolar(res, arr[inicio])
					inicio <- 0
				else
					Encolar(res, arr[inicio])
					inicio <- inicio + 1
				end if
			end while
			//if inicio = fin then
			//	res <- Encolar(arr[inicio], Vacia())
			//else if fin = 0  then
			//	res <- Encolar(arr[fin], ArregloACola(inicio, tam(arr) - 1, arr))
			//else
			//	res <- encolar(arr[fin], ArregloACola(inicio, fin - 1, arr))
			//fi
		---
		
			
				
