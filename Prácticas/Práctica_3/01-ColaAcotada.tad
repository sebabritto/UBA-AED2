TAD ColaAcotada
	Observadores Básicos:
		verCola:	cacotada -> cola(nat)
		capacidad:	cacotada -> nat
	Generadores:
		vacia: nat -> cacotada
		encolar: nat × cacotada c -> cacotada	{(tamaño(verCola(c)) < capacidad(c))}
	Axiomas:
		verCola(vacia(c)) 			≡	vacia
		verCola(encolar(a, c))	≡	encolar(a, verCola(c))
		
		capacidad(vacia(n)) 			≡	n
		capacidad(encolar(a, c))	≡	capacidad(c)
Fin TAD

Representación:
	cacotada se representa con estr donde
		estr es tupla ⟨inicio: nat, fin: nat, elem: array[0...n] de nat⟩

Solución Informal:
	- inicio y fin deben estar entre 0 y n
	- Entre inicio y fin no debe haber valores de 0
	- Si no tiene 0s inicio debe ser la posicion siguiente de fin.
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde:
		(1)	≡	0 <= e.inicio <= tam(e.elem) ∧ 0 <= e.fin <= tam(e.elem)
		(2)	≡	(∀k: nat)((e.inicio <= k <= e.fin) ⇒ e.elem[k] ≠ 0) //No existe elementos entre inicio y fin que sean 0, en este caso es si inicio es menor que fin, algo asi: {0,0,1,2,3,4,0,0}
					∨L (∀i: nat)(e.fin < i < e.inicio ⇒L (e.elem[i] = 0 ∧L ¬(∃j: nat)((0 <= j <= e.fin ∨ e.inicio <= j < tam(e.elem)) ∧ e.elem[j] = 0)))	//Lo mismo de antes pero considerando inicio mayor que fin: {3,4,0,0,0,1,2}
		(3) ≡ ¬(def?(e.elem, 0)) ∧L (∀i: nat)(0 <= i < tam(e.elem) ⇒L ((inicio = fin + 1) ∨ (inicio = 0 ∧ fin = tam(e.elem) - 1)))
---
Función de abstracción:
	Abs:	estr	->	cacotada	{Rep(e)}
	(∀e: estr) Abs(e) =obs ca: cacotada | (1)∧(2)
		donde:
		(1)	≡	verCola(ca) = arregloACola(e.elem, e.inicio, e.fin)
		(2)	≡	capacidad(ca) = tam(e.elem)

		arregloACola: ad(nat) × nat inicio × nat fin -> cola(nat)
		arregloACola(arr, inicio, fin) ≡	if (definido?(arr, inicio)) then
																					if (inicio = fin) then
																							encolar(arr[inicio], vacia)
																					else
																							if (inicio = tam(arr)-1) then
																									encolar(arr[inicio], arregloACola(arr, 0, fin))
																							else
																									encolar(arr[inicio], arregloACola(arr, inicio + 1, fin))
																							fi
																					fi
																			else
																					vacia
																			fi
---
Interfaz:
	Se explica con:	ColaAcotada, Cola(α)
	Géneros:		cacotada
	
	Operaciones básicas:
		vacia(in n: nat)	-> res: cacotada
		Pre ≡ {true}
		Post ≡ {res =obs vacia}
		Complejidad: Θ(1)
		Descripción: Genera una cola acotada vacia
		---
		encolar(in n: nat, in/out ca: cacotada)
		Pre ≡ {ca = ca₀ ∧ tamaño(verCola(ca)) < capacidad(c)}
		Post ≡ {ca = encolar(n, ca₀)}
		Complejidad: Θ(1)
		Descripción: Encola un valor a la cola.
		Aliasing: No presenta aspectos de aliasing.
		---
		verCola(in ca: cacotada)	-> res: cola(nat)
		Pre ≡ {true}
		Post ≡ {res =obs arregloACola(ca)}
		Complejidad: Θ(1)
		Descripción: Devuelve la cola acotada.
		Aliasing: No presenta aspectos de aliasing.
		---
		capacidad(in ca: cacotada) -> res: nat
		Pre ≡ {true}
		Post ≡ {res =obs capacidad(ca)}
		Complejidad: Θ(1)
		Descripción: Devuelve la capacidad maxima de elementos en la cola acotada.
		---
	Algoritmos del módulo:
		ivacia(in n: nat) -> res: cacotada
			res ← vacia(n)
		---
		iencolar(in n: nat, in ca: cacotada) -> res: cacotada
			c ← ca
			encolar(n, ca)
			res ← c
		---
		iverCola(in ca: estr)	-> res: cola(nat)
			res ← arregloACola(ca.elem, ca.inicio, ca.fin)	// Ejemplo
		---
		icapacidad(in ca: estr) -> res: nat
			res ← tam(ca.elem)
		---
