TAD Palindromo(α)
	Observadores Básicos:
		ver: palindromo(α) -> secu(α)
		
	Generadores:
		medio:			α ×								-> palindromo(α)
		medioDoble:	α 								-> palindromo(α)
		agregar:		α × palindromo(α) -> palindromo(α)
		
	Axiomas: ∀ a: α, ∀ p: palindromo(α)
		ver(medio(a))				≡ a • <>
		ver(medioDoble(a))	≡ a • a • <>
		ver(agregar(a, p))	≡ a • (ver(p) ◦ a)
		
	Fin TAD

//a)
Representación:
	palindromo se representa con estr donde
		estr es tupla ⟨long: nat, palabra: secu(α)⟩
---
Solución Informal:
	- e.long debe ser igual a la longitud de la palabra
	- el TAD palindromo no permite crear un palindromo vacio, por lo que la longitud no puede ser 0
	- tengo que verificar que la palabra es un palindromo
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)∧(3)
		donde:
		(1)	≡	e.long = long(e.palabra)
		(2)	≡	e.long > 0
		(3) ≡ esPalindromo(e.palabra)
		
	esPalindromo: secu(α) -> bool
	esPalindromo(s) ≡ s = reverso(s)
---
Función de abstracción:
	Abs:	estr	->	palindromo	{Rep(e)}
	(∀e: estr) Abs(e) =obs p: palindromo | (1)∧(2) 
	donde:
		(1)	≡ ver(p) = e.palabra

//b)
---
Interfaz:
	Se explica con:	Palindromo(α)
	Géneros:		palindromo
	Operaciones básicas: 
		Ver(in p: palindromo(α)) -> res: secu(α)
		Pre ≡ {true}
		Post ≡ {res =obs Ver(p)}
		Complejidad: Θ(1)
		Descripción: Genera una secuencia en base al palindromo recibido.
		Aliasing: res por referencia no modificable.
		---
	Algoritmos del módulo:
		iVer(in e: estr) -> res: secu(α)
			res ← e.palabra
		---
//c)

Representación:
	palindromo(α) se representa con estr donde
		estr es tupla ⟨long: nat, palabra: 	secu(α)⟩
---
Solución Informal:
	- e.long debe ser igual que el doble de la longitud de e.palabra si e.long es par, caso contrario debe ser igual que el doble de la longitud de e.palabra - 1
	- la tupla de palindromo no permite crear un palindromo vacio, por lo que la longitud no puede ser 0
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde:
		(1)	≡	e.long ∈ {2*long(e.palabra), 2*long(e.palabra) - 1}
		(2)	≡	long(e.palabra) > 0
---
Función de abstracción:
	Abs:	estr	->	palindromo(α)	{Rep(e)}
	(∀e: estr) Abs(e) =obs p: palindromo(α) | (1)
		donde:
		(1)	≡	if esPar(e.long) then
						e.palabra & reverso(e.palabra)
					else 
						e.palabra & reverso(com(e.palabra)) 
					fi
---
Interfaz:
	Parámetros formales:
		Géneros:	α
	Se explica con:	Palindromo(α)
	Géneros:		palindromo(α)
	
	Operaciones básicas:
		Ver(in p: palindromo(α))	-> res: secu(α)
		Pre ≡ {true}
		Post ≡ {res =obs Ver(p)}
		Complejidad: O(long(ver(p)) * copy(α))
		Descripción: Genera una secuencia en base al palindromo recibido.
		Aliasing: No presenta aspectos de aliasing.
		---
	Algoritmos del módulo:
		iVer(in e: estr) -> res: secu(α)
			res <- copy(e.palabra)
			if esPar(e.long) then
				i <- long(e.palabra)
			else
				i <- long(e.palabra) - 1
			fi
			for j <- 1 to i do
				res <- agregarAtras(s, s[i-j])
			end for
				
		---
