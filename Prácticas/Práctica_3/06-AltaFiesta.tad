TAD AltaFiesta
	Observadores Básicos:
		invitadosPendientes:	AltaFiesta 							-> conj(Persona)
		regalos: 							AltaFiesta 							-> conj(Regalo)
		personasPorRegalo: 		AltaFiesta a × Regalo r -> conj(Persona)	{r ∈ regalos(a)}
		grupoMasNumeroso: 		AltaFiesta 							-> Grupo
		
	Generadores:
		iniciarFiesta: conj(Persona) invitados -> Fiest
		lleganInvitados: AltaFiesta a × conj(Persona) c × Grupo g × Regalo r -> AltaFiesta	{c ⊆ invitadosPendientes(a) ∧ r ∉ regalos(a)}
	
	Axiomas:
		...
Fin TAD

Representación:
	altafiesta se representa con estr donde
		estr es tupla ⟨invitados: conj(persona), presentes: cola(persona), grupoDe: dicc(grupo, conj(persona)),
									, regaloDeGrupo: dicc(grupo, regalo), grupoMasNumeroso: grupo⟩

Solución Informal:
	- En e.invitados estan todos los invitados de la fiesta, incluyendo tambien a aquellos que ya llegaron.
	- En e.presentes estan los invitados que ya llegaron a la fiesta.
	- En e.grupoDe se encuentra, para cada identificador de grupo i, las personas que al llegar agrupadas 
		se identificaron como i.
	- En e.regaloDeGrupo se encuentra que regalo trajo cada grupo.
	- e.grupoMasNumeroso contiene al identificador del grupo de mas personas. En caso de empate, contiene al
		lexicograficamente menor de los empatados (se asume que la funcion <string esta definida)
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (4)∧(5)∧L(1)∧L(2)∧L(3)∧L(6)
		donde:
		(1) ∧ (2) ≡ (∀ p: persona)(estaEnCola(p, e.presentes) ⇒L p ∈ e.invitados ∧L
								(∃ g: grupo)(g ∈ claves(e.grupoDe) ∧ p ∈ obtener(g, e.grupoDe)))
		(3)	≡	 (∀ g, g': grupo)(({g, g'} ⊆ claves(e.grupoDe) ∧ g ≠ g') ⇒L 
														(obtener(g, e.grupoDe) ∩ obtener(g', e.grupoDe)) = Ø ∧ 
														obtener(g, e.regaloDeGrupo) ≠ obtener(g', e.regaloDeGrupo) ∧
														obtener(g, e.grupoDe) ∪ obtener(g, e.grupoDe) ⊆ e.invitados)
		(4)	≡	claves(e.regaloDeGrupo) = claves(e.grupoDe)
		(5) ≡ e.grupoMasNumeroso ∈ claves(e.grupoDe)
		(6)	≡ (∀ g: grupo)(g ∈ claves(e.grupoDe) ⇒L (#obtener(g, e.grupoDe) < #obtener(e.grupoMasNumeroso, e.grupoDe) ∨
											 (#obtener(g, e.grupoDe) = #obtener(e.grupoMasNumeroso, e.grupoDe)) ∧ g < e.grupoMasNumeroso))
		
		estaEnCola: persona × cola(persona) -> bool
		estaEnCola(p, cp) ≡	if vacía?(cp) then
														false
												else
														proximo(cp) = p ∨ estaEnCola(p, desencolar(cp))
												fi
---
Función de abstracción:
	Abs:	estr	->	altafiesta	{Rep(e)}
	(∀e: estr) Abs(e) =obs a: altafiesta | (1)∧(2)∧L(3)
		donde:
		(1)	≡	invitadosPendientes(a) = invitadosPend(e.invitados, e.presentes)
		(2)	≡	grupoMasNumeroso(a) = e.grupoMasNumeroso
		(3) ≡ (∀ r: regalo)(r ∈ regalos(a) ⇒L 
		(∃ g: grupo)(g ∈ e.grupoDe ∧ r = obtener(g, e.regaloDeGrupo) ∧ personasPorRegalo(a, r) = obtener(g, e.grupoDe)))
		
	invitadosPend: conj(persona) × cola(persona) -> conj(persona)
	invitadosPend(cj, cl) ≡ if vacio?(cj) ∨ vacía?(cl) then
															<>
													else
															if proximo(cl) ∉ cj then
																proximo(cl) • invitadosPend(cj, desencolar(cl))
															else
																invitadosPendientes(desencolar(cl))
															fi
													fi		
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			lleganInvitados(in/out a: AltaFiesta, in c: conj(Persona), in g: Grupo, in r: Regalo)
			Pre ≡ {a = a₀ ∧ c ⊆ invitadosPendientes(a) ∧ r ∉ regalos(a)}
			Post ≡ {a = lleganInvitados(a, c, g, r)}
			Complejidad: Θ(copy(a))
			Descripción: Agrega los invitados, junto con el nombre del grupo, y su respectivo regalo.
			---
	Algoritmos del módulo:
		illeganInvitados(in/out a: estr, in c: conj(Persona), in g: Grupo, in r: Regalo)
			inv ← c
			while (¬(vacio?(inv))) do
				encolar(dameUno(inv), e.presentes)
				inv - dameUno(inv)
			endwhile
			cantDeGrupoMasNum ← #obtener(e.grupoMasNumeroso, e.grupoDe)
			definir(g, c, e.grupoDe)
			definir(g, r, e.regaloDeGrupo)
			if #c > cantDeGrupoMasNum ∨ (#c = cantDeGrupoMasNum ∧ e.grupoMasNumeroso < g) then
				e.grupoMasNumeroso = g
			fi
		---
