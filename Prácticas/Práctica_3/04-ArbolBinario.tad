Representación:
	ab se representa con puntero(estr) donde
		estr es tupla ⟨altura: nat, izq: puntero(estr), raiz: α, der: puntero(estr)⟩

Solución Informal:
	- e.altura debe ser igual a la altura del ArbolBinario
	- no puede haber un nodo que este tanto en el arbol izquierdo como el derecho.
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde:
		(1)	≡	e.altura = alturaAux(e.izq, e.raiz, e.der)
		(2) ≡ todosDistintos(prim(secuencia(e.izq, e.raiz, e.der)), fin(secuencia(e.izq, e.raiz, e.der)))
		
		//Seria puntero(estr) o puntero(ab(α))? CONSULTAR
		alturaAux: puntero(ab(α)) × α × puntero(ab(α)) -> nat 
		alturaAux(izq, raiz, der) ≡	if izq = NULL ∧ der = NULL then
																	1
																else if izq = NULL then
																	1 + alturaAux(*(der).izq, *(der).raiz, *(der).der)
																else if der = NULL then
																	1 + alturaAux(*(izq).izq, *(izq).raiz, *(izq).der)
																else
																	max(alturaAux(*(izq).izq, *(izq).raiz, *(izq).der), alturaAux(*(der).izq, *(der).raiz, *(der).der))
																fi
		
		todosDistintos: α × secuencia(α) -> bool
		todosDistintos(e, s) ≡	if vacía?(s) then
															true
														else if está?(e, s) then
															false
														else
															todosDistintos(prim(s), fin(s))
														fi
		
		secuencia: puntero(ab(α)) izq × α raiz × puntero(ab(α)) -> secu(α)
		secuencia(izq, raiz, der) ≡ if izq = NULL ∧ der = NULL then
																	raiz • <>
																else if izq = NULL then
																	raiz • secuencia(*(der).izq, *(der).raiz, *(der).der)
																else if der = NULL then
																	raiz • secuencia(*(izq).izq, *(izq).raiz, *(izq).der)
																else
																	secuencia(*(izq).izq, *(izq).raiz, *(izq).der) & (raiz • secuencia(*(der).izq, *(der).raiz, *(der).der))
																fi
		
---
Función de abstracción:
	Abs:	estr	->	ab	{Rep(e)}
	(∀e: estr) Abs(e) =obs a: ab | (1)∧(2)∧(3)∧(4)
		donde:
		(1)	≡	nil?(a) = (e.izq = NULL ∧ e.der = NULL ∧ raiz = NULL) //(??)
		(2)	≡	raiz(a) = e.raiz
		(3) ≡ izq(a) = *(e.izq) 
		(4) ≡ der(a) = *(e.der)
---
Funcion de abstracción: //CONSULTAR
	Abs: estr -> ab {Rep(e)}
	(∀e: estr, ∀ a: α, ∀ i, d: ab(α))
	Abs(nil()) ≡ 
	Abs(bin(i, a, b)) ≡  
---
