TAD Stock
	Igualdad Observacional:	(∀ s1, s2: stock)(s1 =obs s2 ⟺ ( 
		(∀ p1, p2: producto)((estaRegistrado?(p1, s1) ∧ estaRegistrado?(p2, s1)) ⟹L 
        (Compras(p, s1) = Compras(p, s2) ∧ Ventas(p, s1) = Ventas(p, s2) ∧ 
        Cantidad(p, s1) = Cantidad(p, s2) ∧ Minimo(p, s1) = Minimo(p ,s2) ∧ 
        (esSustituto?(p1, p2, s1) = esSustituto?(p1, p2, s2) ∨ esSustituto?(p2, p1, s1) = esSustituto?(p2, p1, s2))))));
	Géneros:	stock
	
	Observadores Básicos:
		Compras: producto ⨉ stock -> nat
		Ventas: producto ⨉ stock -> nat
		Cantidad: producto ⨉ stock -> nat
		Minimo: producto p ⨉ stock -> nat		{estaRegistrado?(p)}
		esSustituto?: producto p1 ⨉ producto p2 ⨉ stock -> bool
		
	Generadores:
		Generar:    -> stock
		Registrar: producto p ⨉ nat minimo ⨉ stock -> stock 	{¬estaRegistrado(p)}
		Comprar: producto ⨉ nat cantidad ⨉ stock -> stock 
		Vender: producto p ⨉ nat cant ⨉ stock -> stock 				{cant <= Cantidad(p)}
		//Lo sustituye un producto ya en stock? O uno nuevo? Asumo que uno nuevo.
		Sustituir: producto p1 ⨉ producto p2 ⨉ stock -> stock {estaRegistrado?(p2)}
		
	Otras Operaciones:
		estaRegistrado?: producto ⨉ stock -> bool
		listaDeProductos: stock -> conj(producto)
		devolverProductos: stock -> conj(producto)
		tieneSustituto?: producto p ⨉ stock s -> bool       {estaRegistrado?(p, s)}
		obtenerSustituto: producto p ⨉ stock s -> producto	{estaRegistrado?(p, s) ∧ tieneSustituto?(p, s)}
		
	Axiomas: ∀ s: stock, ∀ p1, p2, p3, p4: producto
		Compras(p1, Generar) ≡ 0
		Compras(p1, Registrar(p2, n, s)) ≡ if p1 =obs p2 then
																				0
																		else
																				Compras(p1, s)
																		fi
		Compras(p1, Comprar(p2, n, s)) ≡ if p1 =obs p2 then
																				Compras(p1, s) + n
																		else
																				Compras(p1, s)
																		fi
		Compras(p1, Vender(p2, n, s)) ≡ Compras(p1 ,s)
		Compras(p1, Sustituir(p2, p3, s)) ≡ if p1 =obs p3 then
																					 0
																				else
																						Compras(p1 ,s)
																				fi
		//--------------------------------------------------------------------------
		Ventas(p1, Generar) ≡ 0
		Ventas(p1, Registrar(p2, n, s)) ≡ if p1 =obs p2 then
																				0
																		else
																				Ventas(p1, s)
																		fi
		Ventas(p1, Comprar(p2, n, s)) ≡ Ventas(p1, s)
		Ventas(p1, Vender(p2, n, s)) ≡ if p1 =obs p2 then
																				Ventas(p1, s) + n
																		else
																				Ventas(p1, s)
																		fi
		Ventas(p1, Sustituir(p2, p3, s)) ≡ if p1 =obs p3 then
																				0
																		else
																				Ventas(p1, s)
																		fi
		//--------------------------------------------------------------------------
		Cantidad(p1, Generar) ≡ 0
		Cantidad(p1, Registrar(p2, n, s)) ≡ if p1 =obs p2 then
																						n
																				else
																						Cantidad(p1, s)
																				fi
		Cantidad(p1, Comprar(p2, n, s)) ≡ if p1 =obs p2 then
																				Cantidad(p1, s) + n
																		else
																				Cantidad(p1, s)
																		fi
		Cantidad(p1, Vender(p2, n, s)) ≡ if p1 =obs p2 then
																				Cantidad(p1) - n
																		else
																				Cantidad(p1)
																		fi
		Cantidad(p1, Sustituir(p2, p3, s)) ≡ if p1 =obs p3 then
																						0
																				else
																						Cantidad
																				fi
		//--------------------------------------------------------------------------
		Minimo(p1, Generar) ≡ No cumple la condicion
		Minimo(p1, Registrar(p2, n, s)) ≡ if p1 =obs p2 then
																				n 
																		else
																				Minimo(p1, s)
																		fi
		Minimo(p1, Comprar(p2, n, s)) ≡ Minimo(p1, s)
		Minimo(p1, Vender(p2, n, s)) ≡ Minimo(p1, s)
		//--------------------------------------------------------------------------
		esSustituto?(p1, p2, Generar) ≡ false
		esSustituto?(p1, p2, Registrar(p3, n, s)) ≡ esSustituto?(p1, p2, s)
		esSustituto?(p1, p2, Comprar(p3, n, s)) ≡ esSustituto?(p1, p2, s)
		esSustituto?(p1, p2, Vender(p3, n, s)) ≡ esSustituto?(p1, p2, s)
		esSustituto?(p1, p2, Sustituir(p3, p4, s)) ≡ (p1 =obs p3 ∧ p2 =obs p4) ∨ esSustituto?(p1, p2, s)
		//--------------------------------------------------------------------------
		estaRegistrado?(p1, Generar) ≡ false
		estaRegistrado?(p1, Registrar(p2, n, s)) ≡ (p1 =obs p2) ∨ estaRegistrado?(p1 ,s)
		estaRegistrado?(p1, Comprar(p2, n, s)) ≡ estaRegistrado?(p1, s)
		estaRegistrado?(p1, Vender(p2, n, s)) ≡ estaRegistrado?(p1, s)
		estaRegistrado?(p1, Sustituir(p2, p3, s)) ≡ ((p1 =obs p2) ∧ ¬(p1 =obs p3)) ∨ estaRegistrado?(p1, s)
		//--------------------------------------------------------------------------
		listaDeProductos(Generar) ≡ ∅
		listaDeProductos(Registrar(p2, n, s)) ≡ listaDeProductos(s) + 1
		listaDeProductos(Comprar(p2, n, s)) ≡ listaDeProductos(s)
		listaDeProductos(Vender(p2, n, s)) ≡ listaDeProductos(s)
		listaDeProductos(Sustituir(p2, p3, s)) ≡ listaDeProductos(s)
		//--------------------------------------------------------------------------
		tieneSustituto?(p1, Generar) ≡ false
		tieneSustituto?(p1, Registrar(p2, n, s)) ≡ ¬(p1 =obs p2) ∨ tieneSustituto?(p1, s)
		tieneSustituto?(p1, Comprar(p2, n, s)) ≡ tieneSustituto?(p1, s)
		tieneSustituto?(p1, Vender(p2, n, s)) ≡ tieneSustituto?(p1, s)
		tieneSustituto?(p1, Sustituir(p2, p3, s)) ≡ if p1 =obs p3 then
																										true
																								else
																										¬(p1 =obs p2) ∧ tieneSustituto?(p1, s)
																								fi
		//--------------------------------------------------------------------------																						
		obtenerSustituto(p1, Generar) ≡ No cumple la condicion
		obtenerSustituto(p1, Registrar(p2, n, s)) ≡ obtenerSustituto(p1, s)
		obtenerSustituto(p1, Comprar(p2, n, s)) ≡ obtenerSustituto(p1, s)
		obtenerSustituto(p1, Vender(p2, n, s)) ≡ obtenerSustituto(p1, s)
		obtenerSustitutop(p1, Sustituir(p2, p3, s)) ≡ if p1 =obs p3 then
																										p2
																								else
																										obtenerSustituto(p1, s)
																								fi
		//--------------------------------------------------------------------------
		devolverProductos(s) ≡ productosConStockMenosQueMinimo(s) U productosYSustitutosMenosQueMinimo(s);

		productosConStockMenosQueMinimo(s) ≡ if Minimo((dameUno(listaDeProductos(s)), s)) > Cantidad((dameUno(listaDeProductos(s)), s)) ∧ ¬(tieneSustituto?(dameUno(listaDeProductos(s)), s)) then
																						Ag(dameUno(listaDeProductos(s), productosConStockMenosQueMinimo(fin(s)))
																				else
																						productosConStockMenosQueMinimo(fin(s))
																				fi

		productosYSustitutosMenosQueMinimo(s) ≡ if tieneSustituto?(dameUno(listaDeProductos(s)), s) then
																								if (Cantidad(obtenerSustituto(dameUno(listaDeProductos(s)), s), s) + Cantidad(dameUno(listaDeProductos(s)), s)) < Minimo(dameUno(listaDeProductos(s)), s) then
																										Ag(dameUno(listaDeProductos(s)), productosYSustitutosMenosQueMinimo(fin(s)))
																								else 
																										productosYSustitutosMenosQueMinimo(fin(s))
																								fi
																						else
																								productosYSustitutosMenosQueMinimo(fin(s))
																						fi
Fin TAD
