TAD Producto es Nat

TAD Stock
	Igualdad Observacional:	(∀ s1, s2: stock)(s1 =obs s2 ⇐⇒ (productos(s1) = productos(s2) ∧ sustitutos(s1) = sustitutos(s2) ∧
													(∀ p: producto)(p ∈ productos(s1) ⇒L (compras(p, s1) = compras(p, s2) ∧ ventas(p, s1) = ventas(p, s2) ∧ minimo(p, s1) = minimo(p, s2)))));
	
	Géneros:	stock
	
	Usa: Conjunto, Producto, Tupla, Bool, Nat
	
	Exporta: observadores, generadores, cantidad, tieneSustituto?, obtenerSustituto, devolverProductos
	
	Observadores Básicos:
		compras:		producto p × stock s	-> nat	{estaRegistrado?(p, s)}
		ventas:			producto p × stock s	-> nat	{estaRegistrado?(p, s)}
		minimo:			producto p × stock s	-> nat	{estaRegistrado?(p, s)}
		productos:	stock s 							-> conj(producto)
		sustitutos:	stock s 							-> conj(tupla(producto, producto))
		
	Generadores:
		crear: 																				-> stock		
		registrar:	producto p × nat min × stock s		-> stock	{¬(estaRegistrado?(p, s))}
		//Si sustitui un producto p por un producto q, no puedo seguir comprando o vendiendo el producto p
		//Esto es lo que supongo no lo deja muy en claro el enunciado.
		compras:		producto p × nat cant × stock s		-> stock	{estaRegistrado?(p, s) ∧ ¬(tieneSustituto?(p, s)) ∧ (n > 0)}
		vender:			producto p × nat cant × stock s		-> stock	{estaRegistrado?(p, s) ∧ ¬(tieneSustituto?(p, s)) ∧ (0 < n ≤ Cantidad(p, s))}
		//Asumo que el stock minimo del sustituto va a ser el mismo del que va a sustituir
		sustituir:	producto p × producto q × stock s	-> stock	{¬(estaRegistrado?(p, s)) ∧ estaRegistrado?(q, s)}
			
	Otras Operaciones:
		estaRegistrado?:			producto p × stock s												-> nat
		cantidad:							producto p × stock s												-> nat		{estaRegistrado?(p, s)}
		tieneSustituto?:			producto p × stock s												-> nat		{estaRegistrado?(p, s)}
		tieneSustitutoAux:		producto × conj(tupla(producto, producto))	-> bool	
		obtenerSustituto:			producto p × stock s												-> nat		{tieneSustituto?(p, s)}
		obtenerSustitutoAux:	producto × conj(tupla(producto, producto))	-> producto
		devolverProductos:		stock																				-> conj(producto)
		productosDebajoDelMinimoSinSustituto: conj(producto) × stock			-> conj(producto)
		productoYSustitutoDebajoDelMinimo:		conj(producto) × stock			-> conj(producto)
	Axiomas: ∀ p, q, r: producto, ∀ s: stock, ∀ n: nat
		compras(p, registrar(q, n, s))	≡	if p = q then
																				0
																			else
																				compras(p, s)
																			fi
		compras(p, comprar(q, n, s))		≡ if p = q then
			 																	compras(p, s) + n
																			else
																				compras(p, s)
																			fi
																		
		compras(p, vender(q, n, s))			≡ compras(p, s) 
		compras(p, sustituir(q, r, s))	≡ if q = p then
																				0
																			else
																				compras(p, s)
																			fi
		//--------------------------------------------------------------------------
		ventas(p, registrar(q, n, s))	≡	if p = q then
																			0
																		else
																			ventas(p, s)
																		fi
		ventas(p, comprar(q, n, s))		≡	ventas(p, s)
		ventas(p, vender(q, n, s))		≡	if p = q then
																			ventas(p, s) + n
																		else
																			ventas(p, s)
																		fi
		ventas(p, sustituir(q, r, s)) ≡	if p = q then
																			0
																		else
																			ventas(p, s)
																		fi
		//--------------------------------------------------------------------------
		minimo(p, registrar(q, n, s))	≡ if p = q then
																			n
																		else
																			minimo(p, s)
																		fi
																		
		minimo(p, comprar(q, n, s))		≡	minimo(p, s)
		minimo(p, vender(q, n, s))		≡	minimo(p, s)
		minimo(p, sustituir(q, r, s))	≡ if p ∈ (q, r) then
																			minimo(r, s)
																		else
																			minimo(p, s)
																		fi
		//--------------------------------------------------------------------------
		productos(crear())						≡ Ø
		productos(registrar(q, n, s))	≡	Ag(q, productos(s))
		productos(comprar(q, n, s))		≡	productos(s)
		productos(vender(q, n, s))		≡ productos(s)
		productos(sustituir(q, r, s))	≡ Ag(q, productos(s))
		//--------------------------------------------------------------------------
		sustitutos(crear()) 						≡ Ø
		sustitutos(registrar(q, n, s))	≡	sustitutos(s)
		sustitutos(comprar(q, n, s))		≡ sustitutos(s)
		sustitutos(vender(q, n, s))			≡	sustitutos(s)
		sustitutos(sustituir(q, r, s))	≡	Ag(⟨r, q⟩, sustitutos(s))
		//--------------------------------------------------------------------------
		estaRegistrado?(p, s) ≡ p ∈ productos(s)
		//--------------------------------------------------------------------------
		cantidad(p, s) ≡ compras(p, s) - ventas(p, s)
		//--------------------------------------------------------------------------
		tieneSustituto?(p, s) ≡ tieneSustitutoAux(p, sustitutos(s))
		
		
		tieneSustitutoAux(p, cp) ≡	if vacía?(cp) then
																	false
																else
																	π₁(dameUno(cp)) = p ∨ tieneSustitutoAux(p, sinUno(cp))
																fi
		//--------------------------------------------------------------------------
		obtenerSustituto(p, cp) ≡ obtenerSustitutoAux(p, sustitutos(s))
		
		
		obtenerSustitutoAux(p, cp) ≡	if π₁(dameUno(cp)) = p then
																		π₂(dameUno(cp))
																	else
																		obtenerSustitutoAux(p, sinUno(cp))
																	fi
		//--------------------------------------------------------------------------
		devolverProductos(s) ≡ productosDebajoDelMinimoSinSustituto(productos(s), s) U productoYSustitutoDebajoDelMinimo(productos(s), s)
		
		productosDebajoDelMinimoSinSustituto(cp, s) ≡	if vacio?(cp) then
																										cp
																									else if (cantidad(dameUno(cp), s) < minimo(dameUno(cp), s)) ∧ ¬(tieneSustituto?(dameUno(cp), s)) then
																										Ag(dameUno(cp), productosDebajoDelMinimoSinSustituto(sinUno(cp), s))
																									else
																										productosDebajoDelMinimoSinSustituto(sinUno(cp), s)
																									fi
																									
		productoYSustitutoDebajoDelMinimo(cp, s)	≡	if vacio?(cp) then
																									cp
																								else if tieneSustituto?(dameUno(cp), s) then
																									if (cantidad(dameUno(cp), s) + cantidad(obtenerSustituto(dameUno(cp), s), s)) < minimo(dameUno(cp), s) then
																										Ag(dameUno(cp), productoYSustitutoDebajoDelMinimo(sinUno(cp), s))
																									else
																										productoYSustitutoDebajoDelMinimo(sinUno(cp), s)
																									fi
																								else
																									productoYSustitutoDebajoDelMinimo(sinUno(cp), s)
																								fi
																									
		
Fin TAD
