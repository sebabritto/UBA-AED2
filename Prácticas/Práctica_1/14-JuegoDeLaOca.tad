TAD Jugador es Nat

TAD JuegoDeLaOca
	Igualdad Observacional:	(∀ o1, o2: oca)(o1 =obs o2 ⇐⇒ (tablero(o1) = tablero(o2) ∧ #turno(o1)=#turno(o2) ∧L
													(∀ n: nat)(0 ≤ n < #turno(o1) ⇒L dado(n, o1) = dado(n, o2)) ∧L
													(∀ j: jugador)(0 ≤ j ≤ 1 ⇐⇒ trayecto(j, o1) = trayecto(j, o2))));
	
	Géneros:	oca
	
	Usa: Nat, Bool, Tablero
	
	Observadores Básicos:
		tablero: 			oca 							-> tablero
		dado: 				nat t × oca o 		-> nat							{t < #turno(o)}
		#turno: 			oca 							-> nat
		trayecto:			jugador j × oca o -> secu(baldosa)	{j ≤ 1}
		
	Generadores:
		crearJuego: tablero 			-> oca
		avanzar: 		nat d × oca o -> oca	{(∀ j: nat)(j ≤ 1 ⇒L ¬esGanador(j, o)) ∧ (1 ≤ n ≤ 6)}
		
	Otras Operaciones:
		pasoPorBaldosa?: 	jugador × baldosa b × oca o -> bool							{j ≤ 1 ∧ b ∈ baldosas(tablero(o))}
		esTurnoDe?:				jugador × oca o 						-> bool							{j ≤ 1}
		dondeEsta?: 			jugador × oca o 						-> baldosa 					{j ≤ 1}
		esGanador?: 			jugador × oca o 						-> bool							{j ≤ 1}
		posicionBaldosa:	baldosa b × oca o						-> nat							{b ∈ baldosas(o)}
		baldosas:					oca 												-> secu(baldosa)
		caeEnPosicion:		jugador × nat dado × oca -> nat
		
	Axiomas: ∀ t: tablero, ∀ d, t: nat, ∀ o: oca, ∀ b: baldosa
		tablero(crearJuego(t))	≡ t
		tablero(avanzar(d, o))	≡ tablero(o)
		//--------------------------------------------------------------------------
		dado(t, avanzar(d, o)) ≡	if #turno(o) = t then
																d
															else
																dado(t, o)
															fi
		//--------------------------------------------------------------------------
		#turno(crearJuego(t))	≡ 0
		#turno(avanzar(d, o)) ≡ #turno(o) + 1
		//--------------------------------------------------------------------------
		trayecto(j, crearJuego(t)) 	≡ prim(baldosas(t)) • <>
		trayecto(j, avanzar(d, o))	≡	if esTurnoDe?(j, o) then
		//posicionBaldosa me devuelve el indice de la baldosa a eso le sumo el valor del dado
																			moverseA(baldosas(o)[caeEnPosicion(j, d, o)], tablero(o)) ◦ trayecto(j, o)
																	else
																		trayecto(j, o)
																	fi 
		caeEnPosicion(j, d, o) ≡	if posicionBaldosa(dondeEsta(j, o), o) + d ≥ long(baldosas(o)) then
																long(baldosas(o)) - 1 //Ultima posicion
															else
																posicionBaldosa(dondeEsta(j, o), o) + d
															fi
		//--------------------------------------------------------------------------
		pasoPorbaldosa?(j, b, o) ≡ b ∈ trayecto(j, o)
		//--------------------------------------------------------------------------
		esTurnoDe?(j, t) ≡ #turnos(o) % 2 = j
		//--------------------------------------------------------------------------
		dondeEsta?(j, o) ≡ ult(trayecto(j, o))
		//--------------------------------------------------------------------------
		esGanador?(j, o) ≡ ult(trayecto(j, o)) = ult(baldosas(o))
		//--------------------------------------------------------------------------
		posicionBaldosa(b, o) ≡ posicionBaldosa(b, tablero(o))
		//--------------------------------------------------------------------------
		baldosas(o) ≡ baldosas(tablero(o))
		
	Fin TAD

TAD Baldosa es Tupla(Bool avanza, Nat cant)

TAD Tablero
	Géneros:	tablero
	
	Observadores Básicos:
		baldosas: tablero -> secu(baldosa)
		
	Generadores:
		//Con esta restriccion asumo que los efectos de cada baldosa no permiten irse del rango.
		crearTablero: secu(baldosa) sb -> tablero {long(sb) > 2 ∧ (∀ n: nat)(n < long(sb) ⇒  (0 ≤ n (if π₁(sb[n]).avanza then + π₂(sb[n]).cant else - π₂(sb[n]).cant fi)  < long(sb))}
		
	Otras Operaciones:
		#baldosas: 			tablero 							-> nat
		posicion: 			baldosa b × tablero t -> nat			{b ∈ baldosas(t)}
		moverseA: 			baldosa b × tablero t -> baldosa	{b ∈ baldosas(t)}
		
	Axiomas: ∀ sb: secu(baldosa), ∀ n: nat, ∀ b: baldosa
		baldosas(crearTablero(sb)) ≡ sb
		//--------------------------------------------------------------------------
		#baldosas(t) ≡ long(baldosas(t))
		//--------------------------------------------------------------------------
		posicion(b, t) ≡ posicionAux(b, baldosas(t))
		
		posicionAux: baldosa × secu(baldosa) -> nat
		posicionAux(b, bs) ≡	if prim(bs) = b then
														0
													else
														1 + posicionAux(b, fin(bs))
													fi
		//--------------------------------------------------------------------------
		moverseA(b, t) ≡ moverseAux(b, baldosas(t), t)
		moverseAux: baldosa × secu(baldosa) × tablero -> baldosa
		moverseAux(b, bs, t) ≡	if b.avanza then
															bs[(posicion(b, t) + b.cant)]
														else
															bs[(posicion(b, t) - b.cant)]
														fi
		//--------------------------------------------------------------------------
		
	Fin TAD
		
