TAD RosetreeExtendido(α)
	extiende
		Rosetree(α)
	Otras Operaciones:
		altura: rosetree(α) → nat
		hoja?: rosetree(α) → bool
		alturaHijos: secu(rosetree(α)) s → nat {¬vacía?(s)}
		#hojas: rosetree(α) → nat
		#hojasHijos: secu(rosetree(α)) s → nat {¬vacía?(s)}
		podar: rosetree(α) a → rosetree(α) {altura(a) > 1}
		podarHijos: secu(rosetree(α)) → secu(rosetree(α))
		agregarATodos: secu(secu(α)) x α -> secu(secu(α))
		ramasAux: secu(rosetree(α)) -> secu(secu(α))
		ramas: rosetree(α) -> secu(secu(α))
		ramasAcotadasAux: secu(secu(α)) x nat -> secu(secu(α))
		ramasAcotadas: rosetree(α) x nat -> secu(secu(α))
		devolverNivel: rosetree(α) x nat -> secu(α)
		nodosEnEseNivel: secu(secu(α)) x nat -> secu(α)
		devolverNodoEnNivel: secu(α) x nat -> α
	Axiomas: ∀ r: rosetree, ∀ s: secu(rosetree(α)), ∀ n: nat
		altura(r) ≡ if hoja?(r) then
												1
										else
												alturaHijos(hijos(r)) + 1
										fi
		//--------------------------------------------------------------------------
		hoja?(r) ≡ vacia?(hijos(r))
		//--------------------------------------------------------------------------
		alturaHijos(s) ≡ if vacia(fin(s)) then
												altura(prim(s))
										 else
												max(altura(prim(s)), alturaHijos(fin(s)))
										 fi
		//--------------------------------------------------------------------------
		#hojas(r) ≡ if hoja?(r) then
										1
								else
										#hojasHijos(hijos(r))
								fi
		
		#hojasHijos(s) ≡ if vacia?(fin(s)) then
												#hojas(prim(s))
										 else
												#hojas(prim(s)) + #hojasHijos(fin(s))
										 fi
		//--------------------------------------------------------------------------
		podar(r) ≡ rose(raiz(r), podarHijos(hijos(r)))
		//--------------------------------------------------------------------------
		podarHijos(s) ≡ if vacia?(s) then
												<>
										else
												if hoja?(prim(s)) then
														podarHijos(fin(s))
												else
														podar(prim(s)) • podarHijos(fin(s))
												fi
										fi
		//--------------------------------------------------------------------------
		ramasAcotadas(r, n) ≡ ramasAcotadasAux(ramas(r), n)
		//--------------------------------------------------------------------------
		ramas(r) ≡  if nil?(r) then
										<>
								else
										agregarATodos(ramasAux(hijos(r)), raiz(r))
								fi
		//--------------------------------------------------------------------------
		agregarATodos(s, n) ≡   if vacia?(s) then
																<>
														else
																(s • prim(s)) • agregarATodos(n, fin(s))
														fi
		//--------------------------------------------------------------------------
		ramasAux(s) ≡   if vacia?(s) then
												<>
										else
												ramas(prim(s)) & ramasAux(fin(h))
										fi
		//--------------------------------------------------------------------------
		ramasAcotadasAux(s, n) ≡	if vacia?(s) then
																	s
															else
																	if long(prim(s)) <= n then
																			prim(s) • ramasAcotadasAux(fin(s), n)
																	else
																			ramasAcotadasAux(fin(s), n)
																	fi
															fi
		//--------------------------------------------------------------------------
		devolverNivel(r, n) ≡   if n = 0 then
																<>
														else
																nodosEnEseNivel(ramas(n),n)
														fi
		//--------------------------------------------------------------------------
		nodosEnEseNivel(s, n) ≡ if vacia?(s) then
																<>
														else
																if long(prim(s)) >= n then
																		devolverNodoEnNivel(prim(s), n) • nodosEnEseNivel(fin(s), n)
																else
																		nodosEnEseNivel(fin(s), n)
																fi
														fi
		//--------------------------------------------------------------------------
		devolverNodoEnNivel(s, n) ≡ if n = 1 then 
																		prim(s)
																else
																		devolverNodoEnNivel(fin(s), n - 1)
																fi
		//--------------------------------------------------------------------------
		ramasConRepetidos(r) ≡  if vacia?(s) then
																<> • <>
														else
																quedarseConLasMasLargas(repetidos(ramas(r)))
														fi
		//--------------------------------------------------------------------------
		repetidos(s) ≡  if vacia?(s) then
												<>
										else
												if tieneRepetido?(prim(s)) then
														prim(s)  • repetidos(fin(s))
												else
														repetidos(fin(s))
												fi
										fi
		//--------------------------------------------------------------------------
		tieneRepetidos?(s) ≡ ¬(vacia?(s)) ∧ (cantidadDeApariciones(s, prim(s)) > 1 ∨ tieneRepetidos?(fin(s)))
    //--------------------------------------------------------------------------
		//Problema: Que pasaria si de la lista que las ramas que tienen repetidos 
		//no existe una con la longitud del arbol? Quedaria vacia. Solucionar.
		quedarseConLasMasLargas(s, r) ≡ if vacia?(s) then
																				s  • <>
																		else
																				if long(prim(s)) = altura(r) then
																						prim(s)  • quedarseConLasMasLargas(fin(s),r)
																				else 
																						quedarseConLasMasLargas(fin(s),r)
																				fi
																		fi
	Fin TAD
