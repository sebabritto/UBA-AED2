TAD Cliente es Tupla<Nat dni, Bool bien>
TAD Caja es Tupla<String nombre, Bool bien>
TAD Banco
	
	Igualdad Observacional:	(∀ b1, b2: banco)(b1 =obs b2 ⇐⇒ 
		(cajas(b1) =obs cajas(b2) ∧ clientesEnFila(b1) = clientesEnFila(b2) ∧ clientesTotales(b1) = clientesTotales(b2)
		∧L (∀ c: caja)(c ∈ cajas(b1) ⇒L clientesAtendidoXCaja(b1, c) = clientesAtendidoXCaja(b2, c)))
		);
	
	Géneros:	banco
	
	Observadores Básicos:
		cajas: banco -> conj(caja)
		clientesEnFila: banco -> secu(cliente)
		clientesTotales: banco -> secu(cliente)
		clientesAtendidoXCaja:	banco × caja -> secu(cliente)
		
	Generadores:
		nuevoBanco: caja a × caja b -> banco
		llegaCliente: banco b × cliente cl-> banco	{cl ∉ clientesEnFila(b)}
		atender: banco b × caja cj -> banco 				{cj ∈ cajas(b)}
		retirarse: banco b × cliente cl -> banco		{cl ∈ clientesEnFila(b)}
		
	Otras Operaciones:
		hayClientesPrioritarios?: banco -> bool
		sacarDeColaPrioritario: secu(cliente) -> secu(cliente)
		sacarDeColaCliente: secu(cliente) -> secu(cliente)
		dameUnClientePrioritario: secu(cliente) -> cliente
		dameUnClienteProle: secu(cliente) -> cliente
	Axiomas: ∀ b: banco, ∀ cj, cj', cj₁: caja, ∀ sc: secu(cliente)
		cajas(nuevoBanco(cj, cj')) 		≡ Ag(cj, Ag(cj', Ø))
		cajas(llegaCliente(b, cl))	≡ cajas(b)
		cajas(atender(b, cj)) 				≡ cajas(b)
		cajas(retirarse(b, cl)) 		≡ cajas(b)
		//--------------------------------------------------------------------------
		clientesEnFila(nuevoBanco(cj, cj'))	≡ <>
		clientesEnFila(llegaCliente(b, cl)) ≡ clientesEnFila(b) ◦ cl
		clientesEnFila(atender(b, cj)) 			≡	if hayClientesPrioritarios?(b, clientesEnFila(b)) then
																						sacarDeColaPrioritario(clientesEnFila(b))
																					else
																						if cj.bien then
																								clientesEnFila(b)
																						else
																								fin(clientesEnFila(b))
																						fi
																					fi
		clientesEnFila(retirarse(b, cl)) 		≡ sacarDeColaCliente(clientesEnFila(b), cl)
		//--------------------------------------------------------------------------
		clientesTotales(nuevoBanco(cj, cj')) 	≡ <>
		clientesTotales(llegaCliente(b, cl))	≡ clientesTotales(b) ◦ cl
		clientesTotales(atender(b, cj)) 			≡ clientesTotales(b) 
		clientesTotales(retirarse(b, cl)) 		≡	clientesTotales(b)
		//--------------------------------------------------------------------------
		clientesAtendidoXCaja(nuevoBanco(cj, cj'), c₁) 	≡ <>
		clientesAtendidoXCaja(llegaCliente(b, cl), c₁) 	≡ clientesAtendidoXCaja(b, c₁)
		clientesAtendidoXCaja(atender(b, cj), c₁) 			≡	if long(clientesEnFila(b)) > 0 then
																												if cj = c₁ then
																													if hayClientesPrioritarios?(b) then
																															clientesAtendidoXCaja(b, c₁) ◦ dameUnClientePrioritario(clientesEnFila(b)) 
																													else
																															if c₁.bien then
																																	clientesAtendidoXCaja(b, c₁)
																															else
																																	clientesAtendidoXCaja(b, c₁) ◦ dameUnClienteProle(clientesEnFila(b))
																															fi
																													fi
																												else
																													clientesAtendidoXCaja(b, c₁)
																												fi
																											else
																												clientesAtendidoXCaja(b, c₁)
																										  fi							
		clientesAtendidoXCaja(retirarse(b, cl), c₁) 		≡ clientesAtendidoXCaja(b, c₁)
		//--------------------------------------------------------------------------
		hayClientesPrioritarios?(b, sc) ≡ if vacía?(sc) then
																				false
																			else
																				prim(sc).bien ∨ hayClientesPrioritarios?(b, fin(sc))
																			fi
		//--------------------------------------------------------------------------
		sacarDeColaPrioritario(sc) ≡ 	if vacía?(sc) then
																			<>
																	else
																			if prim(sc).bien then
																				fin(sc)
																			else
																				prim(sc) • sacarDeColaPrioritario(fin(sc))
																			fi
																	fi
		//--------------------------------------------------------------------------
		sacarDeColaCliente(sc, cl) ≡	if vacía?(sc) then
																			Ø
																	else
																			if prim(sc) = cl then
																					fin(sc)
																			else
																					prim(sc) • sacarDeColaCliente(fin(sc))
																			fi
																	fi
		//--------------------------------------------------------------------------
		dameUnClientePrioritario(sc) ≡	if vacía?(fin(sc)) then
																			prim(sc)
																		else
																			if prim(sc).bien then
																			prim(sc)
																		else
																			fin(sc)
																		fi
		//--------------------------------------------------------------------------
		dameUnClienteProle(sc) ≡ 	if vacía?(fin(sc)) then
																prim(sc)
															else
																if ¬(prim(sc).bien) then
																	prim(sc)
																else
																	dameUnClienteProle(fin(sc))
																fi
															fi
																	
Fin TAD
	
