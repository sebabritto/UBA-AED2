TAD Cliente es Tupla<Nat dni, Bool bien>
TAD Caja es Tupla<String nombre, Bool bien>
TAD Banco
	Igualdad Observacional:	(∀ b1, b2: banco)(b1 =obs b2 ⇐⇒ 
		(cajas(b1) =obs cajas(b2) ∧ clientesEnFila(b1) = clientesEnFila(b2) ∧ clientesTotales(b1) = clientesTotales(b2)
		∧L (∀ c: caja)(c ∈ cajas(b1) ⇒L clientesAtendidoXCaja(b1, c) = clientesAtendidoXCaja(b2, c)))
		);
	
	Géneros:	banco
	
	Observadores Básicos:
		cajas: banco -> conj(caja)
		clientesEnFila: banco -> secu(cliente)
		clientesTotales: banco -> secu(cliente)
		clientesAtendidoXCaja:	banco × caja -> secu(cliente)
	Generadores:
		nuevoBanco:	-> banco
		agregarCaja: banco b × caja c -> banco													{c ∉ cajas(b)}
		llegaCliente: banco b × cliente cl-> banco											{cl ∉ clientesEnFila(b)}
		colarseAdelanteDe: banco b × cliente cl × cliente cl' -> banco	{cl ∉ clientesEnFila(b) ∧ cl' ∈ clientesEnFila(b) ∧ cl' ≠ cl}
		atender: banco b × caja cj -> banco 														{cj ∈ cajas(b)}
		retirarse: banco b × cliente cl -> banco												{cl ∈ clientesEnFila(b)}
	
	Otras Operaciones:
		hayClientesPrioritarios?: banco -> bool
		sacarDeColaPrioritario: secu(cliente) -> secu(cliente)
		sacarDeColaCliente: secu(cliente) -> secu(cliente)
		dameUnClientePrioritario: secu(cliente) -> cliente
		dameUnClienteProle: secu(cliente) -> cliente
		colarClienteAdelante: sec(cliente) sc × cliente cl × cliente cl' -> secu(cliente)	{cl ∉ sc ∧ cl' ∈ sc}
		
	Axiomas: ∀ b: banco, ∀ cj: caja
		cajas(nuevoBanco()) 									≡	Ø
		cajas(agregarCaja(b, cj))							≡	Ag(cj, cajas(b))
		cajas(llegaCliente(b, cl)) 						≡	cajas(b)
		cajas(colarseAdelanteDe(b, cl, cl')) 	≡	cajas(b)
		cajas(atender(b, cj)) 								≡	cajas(b)
		cajas(retirarse(b, cl))		 						≡	cajas(b)
		//--------------------------------------------------------------------------
		clientesEnFila(nuevoBanco())									≡	<>
		clientesEnFila(agregarCaja(b, cj)) 						≡	clientesEnFila(b)
		clientesEnFila(llegaCliente(b, cl)) 					≡ clientesEnFila(b) ◦ cl
		clientesEnFila(colarseAdelanteDe(b, cl, cl')) ≡	colarClienteAdelante(clientesEnFila(b), cl, cl')
		clientesEnFila(atender(b, cj)) 								≡	if hayClientesPrioritarios?(b, clientesEnFila(b)) then
																											sacarDeColaPrioritario(clientesEnFila(b))
																										else
																											if cj.bien then
																													clientesEnFila(b)
																											else
																													fin(clientesEnFila(b))
																											fi
																										fi
		clientesEnFila(retirarse(b, cl)) 							≡	sacarDeColaCliente(clientesEnFila(b), cl)																							
		//--------------------------------------------------------------------------
		clientesTotales(nuevoBanco()) 									≡	<>
		clientesTotales(agregarCaja(b, cj)) 						≡	clientesTotales(b)
		clientesTotales(llegaCliente(b, cl)) 						≡ clientesTotales(b) ◦ cl
		clientesTotales(colarseAdelanteDe(b, cl, cl'))	≡	clientesTotales(b) ◦ cl
		clientesTotales(atender(b, cj)) 								≡	clientesTotales(b)
		clientesTotales(retirarse(b, cl)) 							≡	clientesTotales(b)
		//--------------------------------------------------------------------------
		clientesAtendidoXCaja(nuevoBanco(), cj') 									≡ <>
		clientesAtendidoXCaja(agregarCaja(b, cj), cj') 						≡ if cj = cj' then
																																	<>
																																else
																																	clientesAtendidoXCaja(b, cj')
																																fi
		clientesAtendidoXCaja(llegaCliente(b, cl), cj') 					≡	clientesAtendidoXCaja(b, cj')
		clientesAtendidoXCaja(colarseAdelanteDe(b, cl, cl'), cj')	≡	clientesAtendidoXCaja(b, cj')
		clientesAtendidoXCaja(atender(b, cj), cj') 								≡	if long(clientesEnFila(b)) > 0 then
																																	if cj = cj' then
																																		if hayClientesPrioritarios?(b) then
																																				clientesAtendidoXCaja(b, cj') ◦ dameUnClientePrioritario(clientesEnFila(b)) 
																																		else
																																				if c₁.bien then
																																						clientesAtendidoXCaja(b, cj')
																																				else
																																						clientesAtendidoXCaja(b, cj') ◦ dameUnClienteProle(clientesEnFila(b))
																																				fi
																																		fi
																																	else
																																		clientesAtendidoXCaja(b, cj')
																																	fi
																																else
																																	clientesAtendidoXCaja(b, cj')
																															  fi
		clientesAtendidoXCaja(retirarse(b, cl), cj') 							≡	clientesAtendidoXCaja(b, cj')
		//--------------------------------------------------------------------------
		hayClientesPrioritarios?(b, sc) ≡ if vacía?(sc) then
																				false
																			else
																				prim(sc).bien ∨ hayClientesPrioritarios?(b, fin(sc))
																			fi
		//--------------------------------------------------------------------------
		sacarDeColaPrioritario(sc) ≡ 	if vacía?(sc) then
																			<>
																	else
																			if prim(sc).bien then
																				fin(sc)
																			else
																				prim(sc) • sacarDeColaPrioritario(fin(sc))
																			fi
																	fi
		//--------------------------------------------------------------------------
		sacarDeColaCliente(sc, cl) ≡	if vacía?(sc) then
																			Ø
																	else
																			if prim(sc) = cl then
																					fin(sc)
																			else
																					prim(sc) • sacarDeColaCliente(fin(sc))
																			fi
																	fi
		//--------------------------------------------------------------------------
		dameUnClientePrioritario(sc) ≡	if vacía?(fin(sc)) then
																			prim(sc)
																		else
																			if prim(sc).bien then
																			prim(sc)
																		else
																			fin(sc)
																		fi
		//--------------------------------------------------------------------------
		dameUnClienteProle(sc) ≡ 	if vacía?(fin(sc)) then
																prim(sc)
															else
																if ¬(prim(sc).bien) then
																	prim(sc)
																else
																	dameUnClienteProle(fin(sc))
																fi
															fi
		//--------------------------------------------------------------------------
		colarClienteAdelante(sc, cl, cl') ≡	if vacía?(sc) then
																					<>
																				else
																					if prim(sc) = cl' then
																						cl • sc
																					else
																						prim(sc) • colarClienteAdelante(fin(sc), cl, cl')
																					fi
																				fi
Fin TAD
