TAD SecuenciaExtendida(α)
	extiende	Secuencia(α)
	Otras Operaciones:
		duplicar: secu(α) -> secu(α)
		•<=•: secu(α) x secu(α) -> bool
		reverso: secu(α) -> secu(α)
		capicua: secu(α) -> bool
		esPrefijo?: secu(α) × secu(α) -> bool
		buscar: secu(α) × secu(α) -> nat
		estaOrdenada?: secu(α) -> bool
		insertarOrdenada: secu(α) s × α e -> secu(α)    {estaOrdenada?(s)}
		cantidadApariciones: secu(α) × α -> nat
		esPermutacion?: secu(α) × secu(α) -> bool
		permutacionAux: secu(α) × secu(α) × secu(α) -> bool
		combinar: secu(α) s × secu(α) t -> secu(α)  {estaOrdenada?(s) ∧ estaOrdenada?(t)}
	Axiomas: ∀ s, t, c: secu(α), ∀ e: α
		duplicar(s) ≡	if vacia?(s) then 
                  			<> 
                  		else 
                  			prim(s) • prim(s) • duplicar(fin(s)) 
                  		fi
		//--------------------------------------------------------------------------
		s <= t ≡	if ¬(vacía?(s) ∧ vacía?(t)) then
								(prim(s) = prim(t) ∧ fin(s) <= fin(t)) ∨ prim(s) < prim(t)
							else
								vacía?(s)
							fi
							
		s <= t ≡ vacía?(s) ∨L (¬vacía?(t)) ∧L ((prim(s) < prim(t)) ∨ (¬(prim(s) > prim(t))) ∧ fin(s) <= fin(t))
		//--------------------------------------------------------------------------
		reverso(s) ≡	if vacia?(s) then 
                  		s 
              		else 
                  		reverso(fin(s)) ∘ prim(s) 
                  fi
		//--------------------------------------------------------------------------
		capicua(s) ≡	if ¬(vacia?(s)) then 
                  	prim(s) = ult(s) ∧ capicua(com(fin(s))) 
                  else 
                  	true 
                  fi
		//--------------------------------------------------------------------------
    esPrefijo?(s,t) ≡ if ¬(vacia?(s) ∨ vacia?(t)) then 
												s = t ∨ esPrefijo(s, com(t)) 
											else 
												(vacia?(s) ∧ vacia(t)) ∨ (vacia?(s) ∧ ¬vacia?(t)) 
										  fi
		esPrefijo?(s, t) ≡	if ¬(vacia?(s) ∨ vacia?(t)) then
													prim(s) = prim(t) ∧ esPrefijo?(fin(s), fin(t))
												else
													vacía?(s)
												fi
		//--------------------------------------------------------------------------
		buscar(s, t) ≡	if vacia?(s) then 
										  0 
										else 
											if esPrefijo(s, t) then 
												0 
											else 
												1 + buscar(s, fin(t)) 
											fi
										fi
		//--------------------------------------------------------------------------
    estaOrdenada?(s) ≡ (long(s) < 2) ∨ (prim(s) < prim(fin(s)) ∧ estaOrdenada?(fin(s)))
	  //--------------------------------------------------------------------------
    insertarOrdenada(s, e) ≡ if vacia?(s) ∨ e < prim(s) then 
                                e • s 
                             else 
                                prim(s) • insertarOrdenada(fin(s), e) 
                             fi
		//--------------------------------------------------------------------------
    cantidadApariciones(s, e) ≡ if vacia?(s) then 
                                    0 
                                else 
                                    if prim(s) = e then 
                                        1 + cantidadApariciones(fin(s), e) 
                                    else 
                                        cantidadApariciones(fin(s), e) 
                                    fi 
                                fi
		//------------------------------------------------------------------------
    esPermutacion?(s, t) ≡ long(s) = long(t) ∧ permutacionAux(s, s, t)
		//------------------------------------------------------------------------
    permutacionAux(s, c, t) ≡	(cantidadApariciones(s, prim(c)) = cantidadApariciones(t, prim(c))) ∧ 
                              		permutacionAux(s, fin(c), t)
		//--------------------------------------------------------------------------
		combinar(s, t) ≡ if vacia(s) ∧ ¬vacia?(t) then 
											t 
										 else 
												if vacia?(t) ∧ ¬vacia(s) then 
													s 
												else 
													if prim(s) < prim(t) then 
														prim(s) • combinar(fin(s), t) 
													else 
														prim(t) • combinar(s, fin(t)) 
													fi 
												fi 
										 fi
	Fin TAD
		
