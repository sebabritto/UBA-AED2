TAD Jugador es Nat

TAD Tablero(Extracto)

	Géneros:	tablero
	
	Generadores:
		nuevo: -> tablero
	
	Otras Operaciones:
		siguiente: 			posicion p × direccion × tablero t -> posicion {posicionValida(p, t)}
		posicionValida: posicion × tablero -> bool

TAD Juego

	Igualdad Observacional:	(∀ g1, g2: juego)(g1 =obs g2 ⇐⇒(tablero(g1) = tablero(g2) ∧ jugadoresVivos(g1) = jugadoresVivos(g2) ∧ #jugadores(g1) = #jugadores(g2) ∧L
													(∀ j: jugador)(j ∈ jugadoresVivos(g1) ⇒L (puntajeJugador(j, g1) = puntajeJugador(j, g2) ∧ posicionJugador(j, g1) = posicionJugador(j, g2) ∧ direccionJugador(j, g1) = direccionJugador(j, g2))) 
													));
	
	Géneros:	juego
	
	Usa: Tablero, Posicion, Direccion, Jugador, Bool, Nat
	
	Exporta:	observadores, generadores, empezo?, posicionVacia, siguientePosicion, jugadorEnPosicion
	
	Observadores Básicos:
		tablero:					juego 							-> tablero
		jugadoresVivos:		juego 							-> conj(jugador)
		#jugadores:				juego 							-> nat
		puntajeJugador:		jugador j × juego g -> nat							{j ∈ jugadoresVivos(g)}
		posicionJugador:	jugador j × juego g -> posicion					{j ∈ jugadoresVivos(g)}
		direccionJugador:	jugador j × juego	g -> direccion				{j ∈ jugadoresVivos(g)}
		
	Generadores:
		nuevo: 						tablero																					-> juego
		agregarJugador:		jugador j × posicion p × direccion d × juego g	-> juego	{j ∉ jugadoresVivos(g) ∧ posicionVacia(p, t) ∧ ¬empezo?(g)}
		avanzarJugador:		jugador j × juego g 														-> juego	{j ∈ jugadoresVivos(g) ∧ empezo?(g) ∧ ¬hayGanador?(g)}
		cambiarDireccion: jugador j × direccion d ×	juego g 							-> juego 	{j ∈ jugadoresVivos(g) ∧ empezo?(g) ∧ ¬hayGanador?(g)}
		
	Otras Operaciones:
		//puedo saber si empezo con el observador #jugadores
		empezo?:							juego 														-> bool 
		hayGanador?: 					juego g														-> jugador		{empezo?(g)}
		hayGanadorAux:				conj(jugador) × juego 						-> bool
		posicionVacia:				posicion p × juego g 							-> bool				{posicionValida(p, tablero(g))}
		posicionVaciaAux:			posicion × conj(jugador) × juego	-> bool				
		siguientePosicion:		jugador j × juego g								-> posicion 	{j ∈ jugadoresVivos(g)}
		vaAPisarAAlguien:			jugador j × juego g								-> bool				{j ∈ jugadores(g)}
		jugadorEnPosicion:		posicion p × juego g							-> jugador		{posicionValida(p, tablero(g)) ∧ ¬(posicionVacia(p, g))}
		jugadorEnPosicionAux:	posicion × conj(jugador) × juego 	-> jugador
	Axiomas: ∀ j, j': jugador, ∀ p: posicion, ∀ d: direccion, ∀ g: juego, ∀ t: tablero
		tablero(nuevo(t)) 									≡ t
		tablero(agregarJugador(j, p, d, g))	≡	tablero(g)
		tablero(avanzarJugador(j, g))				≡ tablero(g)
		tablero(cambiarDireccion(j, d, g))	≡ tablero(g)
		//--------------------------------------------------------------------------
		jugadoresVivos(nuevo(t)) 										≡	Ø
		jugadoresVivos(agregarJugador(j, p, d, g))	≡	Ag(j, jugadoresVivos(g))
		jugadoresVivos(avanzarJugador(j, g)) 				≡	if vaAPisarAAlguien(j, g) then
		//lo que hago aca es lo siguiente: Si la posicion a la que va a avanzar hay un jugador entonces tengo que sacar ese jugador de los vivos.
																										jugadoresVivos(j, g) - {jugadorEnPosicion(siguientePosicion(j, g), g)}
																									else
																										jugadoresVivos(j, g)
																									fi
		jugadoresVivos(cambiarDireccion(j, d, g))		≡	jugadoresVivos(j, g)
		//--------------------------------------------------------------------------
		#jugadores(nuevo(t))										≡	0
		#jugadores(agregarJugador(j, p, d, g))	≡	#jugadores(g) + 1 
		#jugadores(avanzarJugador(j, g))				≡	#jugadores(g)
		#jugadores(cambiarDireccion(j, d, g))		≡ #jugadores(g)
		//--------------------------------------------------------------------------
		puntajeJugador(j, agregarJugador(j', p, d, g))	≡	if j = j' then
																												0
																											else
																												puntajeJugador(j, g)
																											fi
		puntajeJugador(j, avanzarJugador(j', g))	≡	if j = j' then
																									if vaAPisarAAlguien(j, g) then
																										puntajeJugador(j, g) + puntajeJugador(jugadorEnPosicion(siguientePosicion(j, g), g) + 1
																									else
																										puntajeJugadorJugador(j, g)
																									fi
																								else
																									puntajeJugadorJugador(j, g)
																								fi
		puntajeJugador(j, cambiarDireccion(j', d, g))	≡ puntajeJugador(j, g)
		//--------------------------------------------------------------------------
		posicionJugador(j, agregarJugador(j', p, d, g))	≡	if j = j' then
																												d
																											else
																												posicionJugador(j, g)
																											fi
		posicionJugador(j, avanzarJugador(j', g))				≡	if j = j' then
																												siguientePosicion(j, g)
																											else
																												posicionJugador(j, g)
																											fi
		posicionJugador(j, cambiarDireccion(j', d, g))	≡	posicionJugador(j, g)
		//--------------------------------------------------------------------------
		direccionJugador(j, agregarJugador(j', p, d, g))	≡	d
		direccionJugador(j, avanzarJugador(j', g))				≡	direccionJugador(j, g)
		direccionJugador(j, cambiarDireccion(j', d, g))		≡ if j = j' then
																													d
																												else
																													direccionJugador(j, g)
																												fi
		//--------------------------------------------------------------------------
		empezo?(g) ≡ #jugadores(g) = 64
		//--------------------------------------------------------------------------
		hayGanador?(g) ≡ hayGanadorAux(jugadoresVivos(g), g)
		
		hayGanadorAux(cj, g) ≡	(puntajeJugador(dameUno(cj), g) > 32) ∨L hayGanadorAux(sinUno(cj), g)
		//--------------------------------------------------------------------------
		posicionVacia(p, g) ≡ posicionVaciaAux(p, jugadoresVivos(g), g) 
		posicionVaciaAux(p, cj, g)	≡	if vacio?(cj) then
																		true
																	else
																		¬(posicionJugador(dameUno(cj), g) = p) ∧ posicionJugador(p, sinUno(cj), g)
																	fi
		//--------------------------------------------------------------------------
		siguientePosicion(j, g) ≡ siguiente(posicion(j, g), direccion(j, g), tablero(g))
		//--------------------------------------------------------------------------
		vaAPisarAAlguien(j, g) ≡ ¬(posicionVacia(siguientePosicion(j, g), g))
		//--------------------------------------------------------------------------
		jugadorEnPosicion(p, g) ≡ jugadorEnPosicionAux(p, jugadoresVivos(g), g)
		
		jugadorEnPosicionAux(p, cj, g) ≡	if posicion(dameUno(cj), g) = p then
																				dameUno(cj)
																			else
																				jugadorEnPosicionAux(p, sinUno(cj), g)
																			fi
		
Fin TAD
