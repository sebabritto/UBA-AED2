//Me lo termine re complicando a este problema, como el ejercicio decia que los asientos de adelante le tienen que dar
//el asiento a una persona con movilidad reducida pense en una manera de diferenciar con los de adelante, y eso me llevo
//a hacer una asientos, tupla ya que son de a dos, y secu porque son filas de asientos. Para ver los asientos
//de adelante tomo los primeros de la mitad y me fijo.
//Estoy seguro que hay una mejor manera de hacerlo pero solo pude pensar en esta, si tienen otra solucion haganmelo saber,
//asi simplifico este ejercicio.
TAD Pasajero es Tupla<int dni, bool movilidad>

TAD Asientos es Secu(Tupla<Asiento>)

TAD Asiento
	Igualdad Observacional:	(∀ a1, a2: asiento)(a1 =obs a2 ⇐⇒
		(ocupado?(a1) = ocupado?(a2) ∧ pasajeroSentado(a1) = pasajeroSentado(a2));
	Géneros:	asiento
	Observadores Básicos:
		ocupado?: asiento -> bool
		pasajeroSentado: asiento a -> pasajero	{ocupado?(a)}
	Generadores:
		nuevo:	-> asiento
		sentarPasajero: asiento × pasajero -> asiento
		desocuparAsiento: asiento a -> asiento	{ocupado?(a)}
	Otras Operaciones:
		reemplazarPasajero: pasajero p × pasajero p' × asiento a -> asiento	{pasajeroSentado(a) = p' ∧ p' ≠ p ∧ (∀ a: asiento)(pasajeroSentado(a) ≠ p)}
	Axiomas: ∀ a: asiento, ∀ p: pasajero
		ocupado?(nuevo) ≡ false
		ocupado?(sentarPasajero(a, p)) ≡ true
		ocupado?(desocuparAsiento(a)) ≡ false
		//--------------------------------------------------------------------------
		pasajeroSentado(sentarPasajero(a, p)) ≡ p
		//--------------------------------------------------------------------------
		reemplazarPasajero(p, p', a) ≡ sentarPasajero(desocuparAsiento(a), p) 
Fin TAD

TAD Colectivo
	Igualdad Observacional:	(∀ c1, c2: colectivo)(c1 =obs c2 ⇐⇒
		(asientos(c1) =obs asientos(c2) ∧ pasajeros(c1) =obs pasajeros(c2) ∧ 
		paradaActual(c1) =obs paradaActual(c2) ∧ paradas(c1) =obs paradas(c2) ∧ 
		hayAsientosDisponibles?(c1) =obs hayAsientosDisponibles?(c2) ∧
	 	pasajerosSinSentar(c1) =obs pasajerosSinSentar(c2) ∧L
		(∀ p: parada)(p ∈ paradas(c1) ⇒L bajanEnParada(c1, p) =obs bajanEnParada(c2, p))
		));
	Géneros:	colectivo
	Exporta: observadores, generadores, otras operaciones
	Usa: pasajero, parada
	Observadores Básicos:
		asientos: colectivo -> asientos
		pasajeros: colectivo -> conj(pasajero)
		paradaActual: colectivo -> parada
		paradas: colectivo -> secu(parada)
		hayAsientosDisponibles?: colectivo -> bool
		bajanEnParada: colectivo c × parada p -> conj(pasajero)	{está?(p, paradas(c))}
		pasajerosSinSentar: colectivo -> conj(pasajero)					{#(pasajeros(c)) > 0}
		
	Generadores:
		arranca: asientos asientos × secu(parada) sp -> colectivo {long(asientos) > 1 ∧ long(sp) > 0}
		avanza: colectivo c -> colectivo	{¬vacía?(paradasRestantes(c))}
		subePasajero: pasajero × parada p × colectivo c -> colectivo	{esta?(p, paradasRestantes(c)) ∧ pasajero ∉ pasajeros(c)}
		
	Otras Operaciones:
		pasajerosSinSentarAux: conj(pasajero) × asientos -> conj(pasajero)
		#asientos: colectivo -> nat
		siguienteParada: colectivo -> parada																								{long(paradasRestantes) > 0}
		paradasRestantes: colectivo -> secu(parada)
		sentarPasajero: colectivo c × asiento × pasajero p ->	asiento	 											{p ∈ pasajeros(c)}
		sentado?: colectivo c × pasajero pj -> bool																					{pj ∈ pasajeros(c)}
		filaDesocupada?: colectivo c × tupla(asiento) ta -> bool														{ta ∈ asientos(c)}
		pasajerosEnFila: colectivo c × tupla(asiento) ta -> conj(pasajero)									{ta ∈ asientos(c)}
		mitadDeAsientos: asientos × nat n -> asientos																				{n >= 0}
		dameElPrimerSinMovilidadReducida: conj(pasajero) cp -> pasajero											{cp = pasajerosSentados(c)}
		pasajerosSentados: colectivo c -> conj(pasajero)											
		sentarseEnAsientoOcupado: colectivo × asientos a × pasajero pj -> asientos					{a = asientos(c) ∧ pj ∈ pasajeros(c) ∧ pj ∉ pasajerosSentados(c)}
		ocuparAsientos: colectivo × asientos a × conj(pasajero) -> asientos									{a = asientos(c)}
		ocuparFila: colectivo × tupla(asiento) ta × conj(pasajero) cp -> tupla(asiento)			{(∀ pj: pasajero)(pj ∈ cp ⇒L pj ∉ pasajerosSentados(c)) ∧L está?(ta, asientos(c))}
		dameAlMenosN: conj(α) × nat n -> conj(α)																					
		desocuparAsientosDePasajeros: colectivo × asientos × conj(pasajero) -> asientos
		desocuparFila: colectivo × tupla(asiento) ta × conj(pasajero) cp -> tupla(asiento)	{(∀ pj: pasajero)(pj ∈ cp ⇒L pj ∈ pasajeros(c)) ∧L está?(ta, asientos(c))}
		
	Axiomas: ∀ a: asientos, ∀ sp: secu(parada), ∀ c: colectivo, ∀ cp: conj(pasajero), ∀ t: tupla(asiento), ∀ pj: pasajero, ∀ cn: conj(α)
		asientos(arranca(a, sp, c)) ≡ a
		asientos(avanza(c)) ≡ if hayAsientosDisponibles?(c) then
														desocuparAsientosDePasajeros(c, asientos(c), bajanEnParada(c, siguienteParada(c)))
													else
														ocuparAsientos(c, desocuparAsientosDePasajeros(c, asientos(c), bajanEnParada(c, siguienteParada(c))), pasajerosSinSentar(c) - bajanEnParada(c, siguienteParada(c)))
													fi
		asientos(subePasajero(pj, pr, c)) ≡ if hayAsientosDisponibles? then
																					ocuparAsientos(c, a, Ag(pj, pasajerosSinSentar(c)))
																				else
																					if pj.movilidad then
																						sentarseEnAsientoOcupado(c, mitadDeAsientos(asientos(a), #(asientos(a)) / 2), pj))
																					else
																						asientos(c)
																					fi
																				fi
		//--------------------------------------------------------------------------
		pasajeros(arranca(a, sp, c)) ≡	Ø
		pasajeros(avanza(c)) ≡	pasajeros(c) - bajanEnParada(c, siguienteParada(c))
		pasajeros(subePasajero(pj, pr, c)) ≡	Ag(pj, pasajeros(c))
		//--------------------------------------------------------------------------
		paradaActual(arranca(a, sp, c)) ≡ prim(sp)
		paradaActual(avanza(c)) ≡	siguienteParada(c)
		paradaActual(subePasajero(pj, pr, c)) ≡	pr
		//--------------------------------------------------------------------------
		paradas(arranca(a, sp, c)) ≡ sp
		paradas(avanza(c)) ≡	paradas(c)
		paradas(subePasajero(pj, pr, c)) ≡	paradas(c)
		//--------------------------------------------------------------------------
		hayAsientosDisponibles?(arranca(a, sp, c)) ≡ true
		hayAsientosDisponibles?(avanza(c)) ≡	#(pasajeros(c) - bajanEnParada(c, siguienteParada(c))) < #asientos(c)
		hayAsientosDisponibles?(subePasajero(pj, pr, c)) ≡	hayAsientosDisponibles?(c) ∧ (#pasajeros(c) + 1 < #asientos(c))			
		//--------------------------------------------------------------------------
		bajanEnParada(arranca(a, sp), pr) ≡	Ø
		bajanEnParada(avanza(c), pr) ≡	if siguienteParada(c) = pr then
																			Ø
																		else
																			bajanEnParada(c, pr)
																		fi
		bajanEnParada(subePasajero(pj, pr, c), pr') ≡ if pr = pr' then
																										Ag(p1, bajanEnParada(c, pr'))
																									else
																										bajanEnParada(c, pr')
																									fi
		//--------------------------------------------------------------------------																				
		pasajerosSinSentar(arranca(a, sp, c)) ≡	Ø
		pasajerosSinSentar(avanza(c)) ≡	(pasajerosSinSentar(c) - bajanEnParada(c, siguienteParada(c))) - pasajerosSinSentarAux(pasajerosSinSentar(c), ocuparAsientos(c, asientos(a), pasajerosSinSentar(c) - bajanEnParada(c, siguienteParada(c))))
		pasajerosSinSentar(subePasajero(pj, pr, c)) ≡ if hayAsientosDisponibles?(c) then
																										 pasajerosSinSentar(c)
																									else
																										if pj.movilidad then
																											Ag(dameElPrimerSinMovilidadReducida(pasajerosSentados(c, asientos(a))), pasajerosSinSentar(c))
																										else
																											Ag(pj, pasajerosSinSentar(c))
																										fi
																									fi
		//--------------------------------------------------------------------------
		pasajerosSinSentarAux(cp, a) ≡	if Ø?(cp) ∨ vacía?(a) then
																			<>
																		else 
																			if π₁(prim(a)) ∈ cp ∨ π₂(prim(a)) ∈ cp then
																				if pasajeroSentado(π₁(prim(a))) ∉ cp then
																					Ag(pasajeroSentado(π₂(prim(a))), pasajerosSinSentarAux((cp - pasajeroSentado(π₂(prim(a)))), fin(a)))
																				else
																					if pasajeroSentado(π₂(prim(a))) ∉ cp then
																						Ag(pasajeroSentado(π₁(prim(a))), pasajerosSinSentarAux((cp - pasajeroSentado(π₁(prim(a)))), fin(a)))
																					else
																						Ag(pasajeroSentado(π₁(prim(a))), Ag(pasajeroSentado(π₂(prim(a)), pasajerosSinSentarAux( (cp - pasajeroSentado(π₂(prim(a)))) -  pasajeroSentado(π₁(prim(a))), fin(a)))))
																					fi
																				fi
																			else
																				pasajerosSinSentarAux(cp, fin(a))
																			fi
																		fi	
		//--------------------------------------------------------------------------
		#asientos(c) ≡ long(asientos(c))
		//--------------------------------------------------------------------------
		siguienteParada(c) ≡ prim(paradasRestantes(c))
		//--------------------------------------------------------------------------
		paradasRestantes(arranca(a, sp, c)) ≡  sp
		paradasRestantes(avanza(c)) ≡ fin(paradasRestantes(c))
		paradasRestantes(subePasajero(pj, pr, c)) ≡ paradasRestantes(c)
		//--------------------------------------------------------------------------
		//Ya existe en TAD Asiento
		sentarPasajero(c, a, pj) ≡ sentarPasajero(a, pj)
		//--------------------------------------------------------------------------
		sentado?(c, pj) ≡ pj ∈ pasajerosSentados(c)
		//--------------------------------------------------------------------------
		filaDesocupada?(c, t) ≡ ¬(ocupado?(π₁(t))) ∨ ¬(ocupado?(π₂(t)))
		//--------------------------------------------------------------------------
		pasajerosEnFila(c, t) ≡ if ocupado?(π₁(t)) ∨ ocupado?(π₂(t)) then
																if ¬(ocupado?(π₂(t))) then 
																	Ag(pasajeroSentado(π₁(t)), Ø)
																else
																	if ¬(ocupado?(π₁(t))) then
																		Ag(pasajeroSentado(π₂(t)), Ø)
																	else
																		Ag(pasajeroSentado(π₂(t)), Ag(pasajeroSentado(π₁(t)), Ø))
																	fi
																fi
														else
															Ø
														fi
		//--------------------------------------------------------------------------
		mitadDeAsientos(a, n) ≡ if vacía?(a) ∨ n = 0 then
													 		<>
														else
															prim(a) • mitadDeAsientos(fin(a), n-1)
														fi
		//--------------------------------------------------------------------------
		dameElPrimerSinMovilidadReducida(cp) ≡	if Ø?(cp) then
																							<>
																						else
																							if dameUno(cp).movilidad then
																								dameElPrimerSinMovilidadReducida(sinUno(cp))
																							else
																								dameUno(cp)
																							fi
																						fi
		//--------------------------------------------------------------------------																					 
		pasajerosSentados(c, a) ≡	if vacía?(a) then
																<>
															else
																if filaDesocupada?(prim(a)) then
																	pasajerosSentados(c, fin(a))
																else
																	if ¬(ocupado?(π₁(prim(a)))) then
																		Ag(π₂(prim(a)), pasajerosSentados(c, fin(a)))
																	else
																		if ¬(ocupado?(π₂(prim(a)))) then
																				Ag(π₁(prim(a)), pasajerosSentados(c, fin(a)))
																		else
																			Ag(π₂(prim(a)), Ag(π₁(prim(a)), pasajerosSentados(c, fin(a))))
																		fi
																	fi
																fi
															fi

		
		//--------------------------------------------------------------------------
		//Busca desde la primera fila hasta la ultima si hay algun asiento con una persona sin movilidad reducida, luego, los intercambio.
		sentarseEnAsientoOcupado(c, a, pj) ≡	if vacía?(a) ∨ sentado?(c, pj) then
		 																				a
																					else
																							if ¬(pasajeroSentado(π₁(prim(a))).movilidad) ∨	¬(pasajeroSentado(π₂(prim(a))).movilidad) then
																									if pasajeroSentado(π₁(prim(a))).movilidad then
																										<π₁(prim(a)), reemplazarPasajero(pj, pasajeroSentado(π₂(prim(a))), π₂(prim(a)))> • sentarseEnAsientoOcupado(c, fin(a), pj)
																									else
																										<reemplazarPasajero(pj, pasajeroSentado(π₁(prim(a))), π₁(prim(a))), π₂(prim(a))> • sentarseEnAsientoOcupado(c, fin(a), pj)
																									fi
																							else
																									sentarseEnAsientoOcupado(c, fin(a), pj)
																							fi
																					fi														
		//--------------------------------------------------------------------------
		//Cierto conjunto de personas se bajan en una parada, luego me encargo de sentar a las personas que estaban sin asiento sin incluir a las que se bajaron.
		ocuparAsientos(c, a, cp) ≡	if vacía?(a) ∨ Ø?(cp) then
																	a
																else
																	ocuparFila(c, prim(a), dameAlMenosN(c, cp, 2)) • ocuparAsientos(c, fin(s), cp - Ag(pasajeroSentado(π₁(ocuparFila(c, prim(a), dameAlMenosN(c, cp, 2)))), pasajeroSentado(π2(ocuparFila(c, prim(a), dameAlMenosN(c, cp, 2)))), Ø)
																fi
		//--------------------------------------------------------------------------
		//De nuevo, me complique bastante las cosas, como una fila es una tupla tengo que fijarme donde colocar a los pasajeros.
		//Si hay algun asiento libre en la fila me fijo cual es:
		//Si hay solo un lugar, agarro uno y hago que se siente, en ese lugar
		//Si hay dos lugares: o hay 2 o hay 1, si hay 1 lo hago sentarse en alguno de los dos, si hay dos hago que se sienten ambos.
		//Si ambos asientos estan ocupados devuelvo la fila sin modificar.
		//¿Pero donde los vas a sentar? Bueno, en el ejercicio donde uso esta funcion, le resto lo que estan sentados en la fila modificada,
		//luego, si no estan ambos en la fila que modifique es porque no los inclui, por ende intenta meterlos en la siguiente fila.
		//DE NUEVO, MUCHO QUILOMBO AL PEDO.
		ocuparFila(c, t, cp) ≡	if ¬ocupado(π₁(t)) ∨  ¬ocupado(π₂(t)) then
															if ocupado(π₂(t)) then
																<sentarPasajero(π₁(t), dameUno(cp)), π₂(t)>
															else
																if ocupado(π₁(t)) then
																	<π₁ ,sentarPasajero(π₂(t), dameUno(cp))>
																else
																	if #cp = 2 then
																		<sentarPasajero(π₁(t), dameUno(cp)), sentarPasajero(π₂(t), dameUno(sinUno(cp)))>
																	else
																		<sentarPasajero(π₁(t), dameUno(cp)), π₂(t)>
																	fi
																fi
															fi
														else
															t
														fi
		//Le das un conjunto y te devuelve el mismo pero con longitud maxima n.
		//Es decir:	dameAlMenosN({1,2}, 3) ≡ {1, 2}, hasta donde te puede dar.
		dameAlMenosN(cn, n) ≡	if Ø?(cp) ∨ n = 0 then
														<>
													else
														Ag(dameUno(cp), dameAlMenosN(sinUno(cp), n-1))
													fi
		//--------------------------------------------------------------------------
		//Le paso un colectivo, los asientos y el conjunto de personas que van a bajar
		//Luego, si estan sentadas libero sus asientos.
		desocuparAsientosDePasajeros(c, a, cp) ≡	if vacía?(a) ∨ Ø?(cp)	then
																									a
																							else
																								if ¬(filaDesocupada?(c, prim(a))) then
																										if π₁(pasajerosEnFila(c, prim(a))) ∈ cp ∨ π₂(pasajerosEnFila(c, prim(a))) ∈ cp then	//Me fijo fila por fila, si alguno de los que esta sentado, pertenece a los pasajeros que se bajan
																											desocuparFila(c, prim(a), cp) • desocuparAsientosDePasajeros(c, fin(a), (cp - π₁(pasajerosEnFila(c, prim(a)))) - π₂(pasajerosEnFila(c, prim(a))) )
																										else
																											prim(a) • desocuparAsientosDePasajeros(s, fin(a), cp) //Si esa fila no tiene ninguno de los que se bajan paso a la otra
																										fi
																								else
																									prim(a) • desocuparAsientosDePasajeros(s, fin(a), cp)	//Si la fila esta desocupada no me interesa, paso a la siguiente
																								fi
																							fi
		//Devuelve la fila desocupada
		desocuparFila(c, t, cp) ≡	if π₂(pasajerosEnFila(c, t)) ∉ cp then
																 <desocuparAsiento(π₁(t)), π₂(t)>
															else
																if π₁(pasajerosEnFila(c, t)) ∉ cp
																	<π₁(t), desocuparAsiento(π₂(t))>
																else
																	<desocuparAsiento(π₁(t)), desocuparAsiento(π₂(t))>
																fi
															fi
Fin TAD
