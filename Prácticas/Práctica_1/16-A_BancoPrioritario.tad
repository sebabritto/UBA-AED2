TAD Caja es Bool

TAD Cliente es Tupla(Nat dni, Bool prioritario)

TAD Banco
	Igualdad Observacional:	(∀ b1, b2: banco)(b1 =obs b2 ⇐⇒ (cajas(b1) = cajas(b2) ∧ clientesEnFila(b1) = clientesEnFila(b2) ∧ clientesTotales(b1) = clientesTotales(b2) ∧L
													(∀ c: caja)(c ∈ cajas(b1) ⇒L clientesAtendidoXCaja(c, b1) = clientesAtendidoXCaja(c, b2))));
	
	Géneros:	banco

	Usa: Caja, Nat, Cliente, Bool, Secu(α), Conj(α)
	
	Exporta: observadores, generadores 
	
	Observadores Básicos:
		cajas: 									banco 						-> conj(caja)
		clientesEnFila: 				banco 						-> secu(cliente)
		clientesTotales: 				banco 						-> secu(cliente)
		clientesAtendidoXCaja:	caja c × banco b	-> secu(cliente) 	{c ∈ cajas(b)}
	Generadores:
		crear:			caja a × caja b 			-> banco
		ingresar: 	cliente cl × banco b	-> banco	{cl ∉ clientesEnFila(b)}
		retirarse:	cliente cl × banco b	-> banco	{cl ∈ clientesEnFila(b)}
		atender: 		caja c × banco b			-> banco	{c ∈ cajas(b) ∧ ¬vacía?(clientesEnFila(b))}
		
	Otras Operaciones:
		hayClientesPrioritarios?:	secu(cliente)						-> bool
		sacarCliente:							cliente × secu(cliente) -> secu(cliente)
		sacarClientePrioritario:	secu(cliente)						-> secu(cliente)
		dameUnClientePrioritario:	secu(cliente) 					-> cliente
		dameUnClienteProle:				secu(cliente) 					-> cliente
		
	Axiomas: ∀ cj, cj', cj'': caja, ∀ cl: cliente, ∀ b: banco
		cajas(crear(cj, cj')) 	≡	{cj, cj'}
		cajas(ingresar(cl, b)) 	≡	cajas(b)
		cajas(retirarse(cl, b)) ≡ cajas(b)
		cajas(atender(cj, b)) 	≡ cajas(b)
		//--------------------------------------------------------------------------
		clientesEnFila(crear(cj, cj')) 		≡	<>
		clientesEnFila(ingresar(cl, b)) 	≡ clientesEnFila(b) ◦ cl
		clientesEnFila(retirarse(cl, b)) 	≡	sacarCliente(cl, clientesEnFila(b))
		clientesEnFila(atender(cj, b)) 		≡	if hayClientesPrioritarios?(clientesEnFila(b)) then
																						sacarClientePrioritario(clientesEnFila(b))
																				else
																						if cj then
																							clientesEnFila(b)
																						else
																							fin(clientesEnFila(b))
																				fi
		//--------------------------------------------------------------------------
		sacarCliente(cl, fila) ≡	if ¬está?(cl, fila) then
																fila
															else if prim(fila) = cl then
																	sacarCliente(cl, fin(fila))
															else
																	prim(fila) • sacarCliente(cl, fin(fila))
	 														fi
		//--------------------------------------------------------------------------
		sacarClientePrioritario(sc) ≡	if vacía?(sc) then
																		sc
																	else if π₂(prim(sc)) then
																		fin(sc)
																	else
																		sacarClientePrioritario(fin(sc))
																	fi
		//--------------------------------------------------------------------------
		hayClientesPrioritarios?(fila) ≡	¬(vacía?(sc)) ∧ (π₂(prim(fila)) ∨ hayClientesPrioritarios?(fin(fila)))
		//--------------------------------------------------------------------------
		clientesTotales(crear(cj, cj')) 	≡ <>
		clientesTotales(ingresar(cl, b)) 	≡	clientesTotales ◦ cl
		clientesTotales(retirarse(cl, b)) ≡ clientesTotales(b)
		clientesTotales(atender(cj, b)) 	≡ clientesTotales(b)
		//--------------------------------------------------------------------------
		clientesAtendidoXCaja(cj, crear(cj', cj'')) ≡ <>
		clientesAtendidoXCaja(cj, ingresar(cl, b)) 	≡ clientesAtendidoXCaja(cj, b)
		clientesAtendidoXCaja(cj, retirarse(cl, b)) ≡ clientesAtendidoXCaja(cj, b)
		clientesAtendidoXCaja(cj, atender(cj', b)) 	≡ if cj = cj' then
																										if hayClientesPrioritarios?(b) then
																											dameUnClientePrioritario(clientesEnFila(b))
																										else if cj then
																											clientesAtendidoXCaja(cj, b)
																										else
																											dameUnClienteProle(clientesEnFila(b))
																										fi
																									else
																										clientesAtendidoXCaja(cj, b)
																									fi
		//--------------------------------------------------------------------------
		dameUnClientePrioritario(sc) ≡	if π₂(prim(sc)) then
																				prim(sc)
																		else
																				dameUnClientePrioritario(fin(sc))
																		fi										
		//--------------------------------------------------------------------------
		dameUnClienteProle(sc) ≡	if ¬π₂(prim(sc)) then
																	prim(sc)
															else
																	dameUnClienteProle(fin(sc))
															fi
		//--------------------------------------------------------------------------
	Fin TAD
