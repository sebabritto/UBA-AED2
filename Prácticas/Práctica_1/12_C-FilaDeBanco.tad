TAD Fila
	Géneros:	fila
	Observadores Básicos:
		Esperando:		persona × fila			-> bool
		Posicion:			persona p × fila		-> nat      {Esperando(p, f)}
		SeColo?:			persona p × fila f	-> bool			{Esperando(p, f)}
		Entro?:				persona × fila			-> bool
		FueAtendido?:	persona × fila			-> bool
		Longitud:			fila								-> nat
		
	Generadores:
		AbrirVentanilla: 																		-> fila
		Llegar:							persona p × fila f							-> fila   {¬Esperando(p,f)}
		Atender:						fila f													-> fila   {¬Vacia(f)}
		Retirarse:					persona p × fila f							-> fila		{Esperando(p, f)}
		ColarseAdelanteDe:	persona p × persona q × fila f	-> fila 	{Esperando(q, f) ∧ ¬Esperando(p, f) ∧ q ≠ p}
		
	Otras Operaciones:
		Vacia: fila -> bool
		
	Axiomas: ∀ p1, p2, p3: persona, ∀ f: fila
		Esperando(p1, AbrirVentanilla())						≡ false
		Esperando(p1, Llegar(p2, f))								≡ (p1 = p2) ∨ (Esperando(p1, f))
		Esperando(p1, Atender(f))										≡ ¬(Posicion(p1, f) = 1) ∨ Esperando(p1, f)
		Esperando(p1, Retirarse(p2, f))							≡ ¬(p1 = p2) ∧ Esperando(p1, f)
		Esperando(p1, ColarseAdelanteDe(p2, p3, f))	≡ (p1 = p2 ∨ p1 = p3) ∨ Esperando(p1, f)
		//--------------------------------------------------------------------------
		Posicion(p1, AbrirVentanilla()) ≡ No cumple la restriccion, no se axiomatiza
		Posicion(p1, Llegar(p2, f))			≡	if p1 = p2 then
																				Longitud(f)
																			else
																				Posicion(p1, f)
																			fi
		Posicion(p1, Atender(f)) 				≡ Posicion(p1, f) - 1
		//Por precondicion de Posicion se que tiene que estar en la fila asi que si p2 se retiro ⇒ p1 ≠ p2
		Posicion(p1, Retirarse(p2, f))	≡ if Posicion(p1, f) < Posicion(p2, f) then
																				Posicion(p1, f)
																			else
																				Posicion(p1, f) - 1
																			fi
		Posicion(p1, ColarseAdelanteDe(p2, p3, f)) ≡	if p1 = p2 then
																										Posicion(p3, f)
																									else if p1 = p3 then
																										Posicion(p3, f) + 1
																									else if Posicion(p1, f) < Posicion(p3, f) then
																										Posicion(p1, f)
																									else
																										Posicion(p1, f) + 1
																									fi
		//--------------------------------------------------------------------------
		SeColo?(p1, Llegar(p2, f))			≡ ¬(p1 = p2) ∧ SeColo?(p1, f)
		SeColo?(p1, Atender(f))					≡ SeColo?(p1, f)
		SeColo?(p1, Retirarse(p2, f))		≡ SeColo?(p1, f)
		SeColo?(p1, ColarseAdelanteDe(p2, p3, f))	≡ (p1 = p2) ∨ SeColo?(p1, f)
		//--------------------------------------------------------------------------
		Entro?(p1, AbrirVentanilla())	≡ false 
		Entro?(p1, Llegar(p2, f))			≡ (p1 = p2) ∨ Entro?(p1, f)
		Entro?(p1, Atender(f))				≡ (Posicion(p1, f) = 1) ∨ Entro?(p1, f)
		Entro?(p1, Retirarse(p2, f))	≡ (p1 = p2) ∨ Entro?(p1, f) 
		Entro?(p1, ColarseAdelanteDe(p2, p3, f)) ≡ (p1 = p2) ∨ Entro?(p1, f) 
		//--------------------------------------------------------------------------
		FueAtendido?(p1, AbrirVentanilla()) ≡	false
		FueAtendido?(p1, Llegar(p2, f))			≡ FueAtendido?(p1, f)
		FueAtendido?(p1, Atender(f))				≡ Posicion(p1, f) = 1
		FueAtendido?(p1, Retirarse(p2, f))	≡ FueAtendido(p1 ,f)
		FueAtendido?(p1, ColarseAdelanteDe(p1, p2 ,f)) ≡ FueAtendido?(p1, f)
		//--------------------------------------------------------------------------
		Longitud(AbrirVentanilla())	≡ 0
		Longitud(Llegar(p1, f))			≡ Longitud(f) + 1
		Longitud(Atender(f))				≡ Longitud(f) - 1
		Longitud(Retirarse(p1, f))	≡ Longitud(f) - 1
		Longitud(ColarseAdelanteDe(p1, p2, f)) ≡ Longitud(f) + 1
		//--------------------------------------------------------------------------
		Vacia(f) ≡ Longitud(f) =obs 0
		
	Fin TAD
