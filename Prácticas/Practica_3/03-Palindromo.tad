TAD Palindromo(α)
	Observadores Básicos:
		ver: palindromo(α) -> secu(α)
		
	Generadores:
		medio: α -> palindromo(α)
		medioDoble: α -> palindromo(α)
		agregar: α × palindromo(α) -> palindromo(α)
	
	Axiomas:
			ver(medio(α)) 			≡ a • <>
			ver(medioDoble(α)) 	≡ a • a • <>
			ver(agregar(a, p)) 	≡	a • (ver(p) ◦ a)
Fin TAD

Representación:
	palindromo se representa con estr donde
		estr es tupla ⟨long:	nat, palabra: 	secu(α) ⟩

Solución Informal:
	- e.long debe ser la longitud de e.palabra
	- debe de haber por lo menos un valor, ya que no tiene generadores vacios.
	- e.palabra debe ser un palindromo
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)∧(3)
		donde:
		(1)	≡	e.long = long(e.palabra)
		(2)	≡	e.long > 0
		(3) ≡ (∀i: nat)(0 <= i < e.long/2 ⇒L e.palabra[i] = e.palabra[e.long - 1 - i])
---
Función de abstracción:
	Abs:	estr	->	palindromo	{Rep(e)}
	(∀e: estr) Abs(e) =obs pal: palindromo | (1)
		donde:
		(1)	≡	ver(pal) = e.palabra
---
Interfaz:
	Se explica con:	Palindromo
	Géneros:	palindromo
	
	Operaciones básicas:
		medio(in a: α)	-> res: palindromo(α)
		Pre ≡ {true}
		Post ≡ {res =obs medio(a)}
		---
		medioDoble(in a: α) -> res: palindromo(α)
		Pre ≡ {true}
		Post ≡ {res =obs medioDoble(a)}
		---
		agregar(in a: α, in/out p: palindromo(α))
		Pre ≡ {p = p₀}
		Post ≡ {p =obs agregar(a, p₀)}
		---
		ver(in p: palindromo(α)) -> res: secu(α)
		Pre ≡ {true}
		Post ≡ {}
		---
	Algoritmos del módulo:
		iver(in p: estr) -> res: secu(α)
			res ← p.palabra
		---
